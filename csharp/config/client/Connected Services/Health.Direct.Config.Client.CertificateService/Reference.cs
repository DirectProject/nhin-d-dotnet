//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Health.Direct.Config.Client.CertificateService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Certificate", Namespace="urn:directproject:config/store/082010")]
    public partial class Certificate : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private byte[] DataField;
        
        private long IDField;
        
        private string OwnerField;
        
        private Health.Direct.Config.Client.CertificateService.EntityStatus StatusField;
        
        private string ThumbprintField;
        
        private System.DateTime ValidEndDateField;
        
        private System.DateTime ValidStartDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DataField, value) != true))
                {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Owner
        {
            get
            {
                return this.OwnerField;
            }
            set
            {
                if ((object.ReferenceEquals(this.OwnerField, value) != true))
                {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.CertificateService.EntityStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Thumbprint
        {
            get
            {
                return this.ThumbprintField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ThumbprintField, value) != true))
                {
                    this.ThumbprintField = value;
                    this.RaisePropertyChanged("Thumbprint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ValidEndDate
        {
            get
            {
                return this.ValidEndDateField;
            }
            set
            {
                if ((this.ValidEndDateField.Equals(value) != true))
                {
                    this.ValidEndDateField = value;
                    this.RaisePropertyChanged("ValidEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ValidStartDate
        {
            get
            {
                return this.ValidStartDateField;
            }
            set
            {
                if ((this.ValidStartDateField.Equals(value) != true))
                {
                    this.ValidStartDateField = value;
                    this.RaisePropertyChanged("ValidStartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityStatus", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum EntityStatus : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreFault", Namespace="urn:directproject:config/store/082010")]
    public partial class ConfigStoreFault : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private Health.Direct.Config.Client.CertificateService.ConfigStoreError ErrorField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Health.Direct.Config.Client.CertificateService.ConfigStoreError Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                if ((this.ErrorField.Equals(value) != true))
                {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageField, value) != true))
                {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreError", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum ConfigStoreError : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unexpected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conflict = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniqueConstraint = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForeignKeyConstraint = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIDs = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomain = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainNameLength = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAddress = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLength = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayNameLength = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidEmailAddress = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertificate = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidX509Certificate = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertificateData = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidOwnerName = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OwnerLength = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidThumbprint = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAnchor = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountNameLength = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMXSMTPName = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXSMTPNameLength = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMX = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDnsRecord = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotesLength = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAdministrator = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUsername = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPassword = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyName = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyNameLength = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobName = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobNameLength = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBlob = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AgentNameLength = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAgentName = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdnIdentifier = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdn = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateProcessedMdn = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateDispatchedMdn = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateFailedMdn = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyProcessed = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnUncorrelated = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyFailed = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUrl = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UrlLength = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBundle = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateMdnStart = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyName = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyNameLength = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertPolicyData = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicy = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroupName = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroup = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyGroupDescriptionLength = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyUse = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingDomain = 59,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateGetOptions", Namespace="urn:directproject:config/store/082010")]
    public partial class CertificateGetOptions : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private bool IncludeDataField;
        
        private bool IncludePrivateKeyField;
        
        private System.Nullable<Health.Direct.Config.Client.CertificateService.EntityStatus> StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludeData
        {
            get
            {
                return this.IncludeDataField;
            }
            set
            {
                if ((this.IncludeDataField.Equals(value) != true))
                {
                    this.IncludeDataField = value;
                    this.RaisePropertyChanged("IncludeData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IncludePrivateKey
        {
            get
            {
                return this.IncludePrivateKeyField;
            }
            set
            {
                if ((this.IncludePrivateKeyField.Equals(value) != true))
                {
                    this.IncludePrivateKeyField = value;
                    this.RaisePropertyChanged("IncludePrivateKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Health.Direct.Config.Client.CertificateService.EntityStatus> Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Anchor", Namespace="urn:directproject:config/store/082010")]
    public partial class Anchor : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private byte[] DataField;
        
        private bool ForIncomingField;
        
        private bool ForOutgoingField;
        
        private long IDField;
        
        private string OwnerField;
        
        private Health.Direct.Config.Client.CertificateService.EntityStatus StatusField;
        
        private string ThumbprintField;
        
        private System.DateTime ValidEndDateField;
        
        private System.DateTime ValidStartDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DataField, value) != true))
                {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ForIncoming
        {
            get
            {
                return this.ForIncomingField;
            }
            set
            {
                if ((this.ForIncomingField.Equals(value) != true))
                {
                    this.ForIncomingField = value;
                    this.RaisePropertyChanged("ForIncoming");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ForOutgoing
        {
            get
            {
                return this.ForOutgoingField;
            }
            set
            {
                if ((this.ForOutgoingField.Equals(value) != true))
                {
                    this.ForOutgoingField = value;
                    this.RaisePropertyChanged("ForOutgoing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Owner
        {
            get
            {
                return this.OwnerField;
            }
            set
            {
                if ((object.ReferenceEquals(this.OwnerField, value) != true))
                {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.CertificateService.EntityStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Thumbprint
        {
            get
            {
                return this.ThumbprintField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ThumbprintField, value) != true))
                {
                    this.ThumbprintField = value;
                    this.RaisePropertyChanged("Thumbprint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ValidEndDate
        {
            get
            {
                return this.ValidEndDateField;
            }
            set
            {
                if ((this.ValidEndDateField.Equals(value) != true))
                {
                    this.ValidEndDateField = value;
                    this.RaisePropertyChanged("ValidEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ValidStartDate
        {
            get
            {
                return this.ValidStartDateField;
            }
            set
            {
                if ((this.ValidStartDateField.Equals(value) != true))
                {
                    this.ValidStartDateField = value;
                    this.RaisePropertyChanged("ValidStartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bundle", Namespace="urn:directproject:config/store/082010")]
    public partial class Bundle : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private bool ForIncomingField;
        
        private bool ForOutgoingField;
        
        private long IDField;
        
        private string OwnerField;
        
        private Health.Direct.Config.Client.CertificateService.EntityStatus StatusField;
        
        private string UrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ForIncoming
        {
            get
            {
                return this.ForIncomingField;
            }
            set
            {
                if ((this.ForIncomingField.Equals(value) != true))
                {
                    this.ForIncomingField = value;
                    this.RaisePropertyChanged("ForIncoming");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ForOutgoing
        {
            get
            {
                return this.ForOutgoingField;
            }
            set
            {
                if ((this.ForOutgoingField.Equals(value) != true))
                {
                    this.ForOutgoingField = value;
                    this.RaisePropertyChanged("ForOutgoing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Owner
        {
            get
            {
                return this.OwnerField;
            }
            set
            {
                if ((object.ReferenceEquals(this.OwnerField, value) != true))
                {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.CertificateService.EntityStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Url
        {
            get
            {
                return this.UrlField;
            }
            set
            {
                if ((object.ReferenceEquals(this.UrlField, value) != true))
                {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.CertificateService.ICertificateStore")]
    public interface ICertificateStore
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/AddCertificate", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/AddCertificateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/AddCertificateConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Certificate AddCertificate(Health.Direct.Config.Client.CertificateService.Certificate certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/AddCertificate", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/AddCertificateResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate> AddCertificateAsync(Health.Direct.Config.Client.CertificateService.Certificate certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/AddPkcs11Certificate", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/AddPkcs11CertificateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/AddPkcs11CertificateConfi" +
            "gStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Certificate AddPkcs11Certificate(Health.Direct.Config.Client.CertificateService.Certificate certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/AddPkcs11Certificate", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/AddPkcs11CertificateRespo" +
            "nse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate> AddPkcs11CertificateAsync(Health.Direct.Config.Client.CertificateService.Certificate certificate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/AddCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/AddCertificatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/AddCertificatesConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        void AddCertificates(Health.Direct.Config.Client.CertificateService.Certificate[] certificates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/AddCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/AddCertificatesResponse")]
        System.Threading.Tasks.Task AddCertificatesAsync(Health.Direct.Config.Client.CertificateService.Certificate[] certificates);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificate", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/GetCertificateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificateConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Certificate GetCertificate(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificate", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/GetCertificateResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate> GetCertificateAsync(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Certificate[] GetCertificates(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate[]> GetCertificatesAsync(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesForOwner", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesForOwnerRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesForOwnerCo" +
            "nfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Certificate[] GetCertificatesForOwner(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesForOwner", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/GetCertificatesForOwnerRe" +
            "sponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate[]> GetCertificatesForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatus", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusConfi" +
            "gStoreFaultFault", Name="ConfigStoreFault")]
        void SetCertificateStatus(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatus", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusRespo" +
            "nse")]
        System.Threading.Tasks.Task SetCertificateStatusAsync(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusForOw" +
            "ner", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusForOw" +
            "nerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusForOw" +
            "nerConfigStoreFaultFault", Name="ConfigStoreFault")]
        void SetCertificateStatusForOwner(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusForOw" +
            "ner", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/SetCertificateStatusForOw" +
            "nerResponse")]
        System.Threading.Tasks.Task SetCertificateStatusForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesConfigS" +
            "toreFaultFault", Name="ConfigStoreFault")]
        void RemoveCertificates(long[] certificateIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesRespons" +
            "e")]
        System.Threading.Tasks.Task RemoveCertificatesAsync(long[] certificateIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesForOwne" +
            "r", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesForOwne" +
            "rResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesForOwne" +
            "rConfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemoveCertificatesForOwner(string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesForOwne" +
            "r", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/RemoveCertificatesForOwne" +
            "rResponse")]
        System.Threading.Tasks.Task RemoveCertificatesForOwnerAsync(string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/EnumerateCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/EnumerateCertificatesResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertificateStore/EnumerateCertificatesConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Certificate[] EnumerateCertificates(long lastCertificateID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertificateStore/EnumerateCertificates", ReplyAction="urn:directproject:config/store/082010/ICertificateStore/EnumerateCertificatesResp" +
            "onse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate[]> EnumerateCertificatesAsync(long lastCertificateID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface ICertificateStoreChannel : Health.Direct.Config.Client.CertificateService.ICertificateStore, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class CertificateStoreClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.CertificateService.ICertificateStore>, Health.Direct.Config.Client.CertificateService.ICertificateStore
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CertificateStoreClient() : 
                base(CertificateStoreClient.GetDefaultBinding(), CertificateStoreClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICertificateStore.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertificateStoreClient(EndpointConfiguration endpointConfiguration) : 
                base(CertificateStoreClient.GetBindingForEndpoint(endpointConfiguration), CertificateStoreClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertificateStoreClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CertificateStoreClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertificateStoreClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CertificateStoreClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertificateStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Health.Direct.Config.Client.CertificateService.Certificate AddCertificate(Health.Direct.Config.Client.CertificateService.Certificate certificate)
        {
            return base.Channel.AddCertificate(certificate);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate> AddCertificateAsync(Health.Direct.Config.Client.CertificateService.Certificate certificate)
        {
            return base.Channel.AddCertificateAsync(certificate);
        }
        
        public Health.Direct.Config.Client.CertificateService.Certificate AddPkcs11Certificate(Health.Direct.Config.Client.CertificateService.Certificate certificate)
        {
            return base.Channel.AddPkcs11Certificate(certificate);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate> AddPkcs11CertificateAsync(Health.Direct.Config.Client.CertificateService.Certificate certificate)
        {
            return base.Channel.AddPkcs11CertificateAsync(certificate);
        }
        
        public void AddCertificates(Health.Direct.Config.Client.CertificateService.Certificate[] certificates)
        {
            base.Channel.AddCertificates(certificates);
        }
        
        public System.Threading.Tasks.Task AddCertificatesAsync(Health.Direct.Config.Client.CertificateService.Certificate[] certificates)
        {
            return base.Channel.AddCertificatesAsync(certificates);
        }
        
        public Health.Direct.Config.Client.CertificateService.Certificate GetCertificate(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetCertificate(owner, thumbprint, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate> GetCertificateAsync(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetCertificateAsync(owner, thumbprint, options);
        }
        
        public Health.Direct.Config.Client.CertificateService.Certificate[] GetCertificates(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetCertificates(certificateIDs, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate[]> GetCertificatesAsync(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetCertificatesAsync(certificateIDs, options);
        }
        
        public Health.Direct.Config.Client.CertificateService.Certificate[] GetCertificatesForOwner(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetCertificatesForOwner(owner, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate[]> GetCertificatesForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetCertificatesForOwnerAsync(owner, options);
        }
        
        public void SetCertificateStatus(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            base.Channel.SetCertificateStatus(certificateIDs, status);
        }
        
        public System.Threading.Tasks.Task SetCertificateStatusAsync(long[] certificateIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.SetCertificateStatusAsync(certificateIDs, status);
        }
        
        public void SetCertificateStatusForOwner(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            base.Channel.SetCertificateStatusForOwner(owner, status);
        }
        
        public System.Threading.Tasks.Task SetCertificateStatusForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.SetCertificateStatusForOwnerAsync(owner, status);
        }
        
        public void RemoveCertificates(long[] certificateIDs)
        {
            base.Channel.RemoveCertificates(certificateIDs);
        }
        
        public System.Threading.Tasks.Task RemoveCertificatesAsync(long[] certificateIDs)
        {
            return base.Channel.RemoveCertificatesAsync(certificateIDs);
        }
        
        public void RemoveCertificatesForOwner(string owner)
        {
            base.Channel.RemoveCertificatesForOwner(owner);
        }
        
        public System.Threading.Tasks.Task RemoveCertificatesForOwnerAsync(string owner)
        {
            return base.Channel.RemoveCertificatesForOwnerAsync(owner);
        }
        
        public Health.Direct.Config.Client.CertificateService.Certificate[] EnumerateCertificates(long lastCertificateID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.EnumerateCertificates(lastCertificateID, maxResults, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Certificate[]> EnumerateCertificatesAsync(long lastCertificateID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.EnumerateCertificatesAsync(lastCertificateID, maxResults, options);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICertificateStore))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICertificateStore))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/CertificateService.svc/Certificates");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CertificateStoreClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICertificateStore);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CertificateStoreClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICertificateStore);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICertificateStore,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.CertificateService.IAnchorStore")]
    public interface IAnchorStore
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/AddAnchor", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/AddAnchorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/AddAnchorConfigStoreFaultFault" +
            "", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Anchor AddAnchor(Health.Direct.Config.Client.CertificateService.Anchor anchor);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/AddAnchor", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/AddAnchorResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor> AddAnchorAsync(Health.Direct.Config.Client.CertificateService.Anchor anchor);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/AddAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/AddAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/AddAnchorsConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        void AddAnchors(Health.Direct.Config.Client.CertificateService.Anchor[] anchors);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/AddAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/AddAnchorsResponse")]
        System.Threading.Tasks.Task AddAnchorsAsync(Health.Direct.Config.Client.CertificateService.Anchor[] anchors);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchor", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetAnchorResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchorConfigStoreFaultFault" +
            "", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Anchor GetAnchor(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchor", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetAnchorResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor> GetAnchorAsync(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Anchor[] GetAnchors(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetAnchorsAsync(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsForOwner", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsForOwnerConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Anchor[] GetAnchorsForOwner(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsForOwner", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetAnchorsForOwnerResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetAnchorsForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetIncomingAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetIncomingAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/GetIncomingAnchorsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Anchor[] GetIncomingAnchors(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetIncomingAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetIncomingAnchorsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetIncomingAnchorsAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetOutgoingAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetOutgoingAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/GetOutgoingAnchorsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Anchor[] GetOutgoingAnchors(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/GetOutgoingAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/GetOutgoingAnchorsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetOutgoingAnchorsAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatus", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        void SetAnchorStatus(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatus", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusResponse")]
        System.Threading.Tasks.Task SetAnchorStatusAsync(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusForOwner", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusForOwnerRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusForOwnerConfigS" +
            "toreFaultFault", Name="ConfigStoreFault")]
        void SetAnchorStatusForOwner(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusForOwner", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/SetAnchorStatusForOwnerRespons" +
            "e")]
        System.Threading.Tasks.Task SetAnchorStatusForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/EnumerateAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/EnumerateAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/EnumerateAnchorsConfigStoreFau" +
            "ltFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Anchor[] EnumerateAnchors(long lastAnchorID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/EnumerateAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/EnumerateAnchorsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> EnumerateAnchorsAsync(long lastAnchorID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsConfigStoreFaultF" +
            "ault", Name="ConfigStoreFault")]
        void RemoveAnchors(long[] anchorIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchors", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsResponse")]
        System.Threading.Tasks.Task RemoveAnchorsAsync(long[] anchorIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsForOwner", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsForOwnerConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        void RemoveAnchorsForOwner(string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsForOwner", ReplyAction="urn:directproject:config/store/082010/IAnchorStore/RemoveAnchorsForOwnerResponse")]
        System.Threading.Tasks.Task RemoveAnchorsForOwnerAsync(string owner);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IAnchorStoreChannel : Health.Direct.Config.Client.CertificateService.IAnchorStore, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class AnchorStoreClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.CertificateService.IAnchorStore>, Health.Direct.Config.Client.CertificateService.IAnchorStore
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AnchorStoreClient() : 
                base(AnchorStoreClient.GetDefaultBinding(), AnchorStoreClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAnchorStore.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AnchorStoreClient(EndpointConfiguration endpointConfiguration) : 
                base(AnchorStoreClient.GetBindingForEndpoint(endpointConfiguration), AnchorStoreClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AnchorStoreClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AnchorStoreClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AnchorStoreClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AnchorStoreClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AnchorStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Health.Direct.Config.Client.CertificateService.Anchor AddAnchor(Health.Direct.Config.Client.CertificateService.Anchor anchor)
        {
            return base.Channel.AddAnchor(anchor);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor> AddAnchorAsync(Health.Direct.Config.Client.CertificateService.Anchor anchor)
        {
            return base.Channel.AddAnchorAsync(anchor);
        }
        
        public void AddAnchors(Health.Direct.Config.Client.CertificateService.Anchor[] anchors)
        {
            base.Channel.AddAnchors(anchors);
        }
        
        public System.Threading.Tasks.Task AddAnchorsAsync(Health.Direct.Config.Client.CertificateService.Anchor[] anchors)
        {
            return base.Channel.AddAnchorsAsync(anchors);
        }
        
        public Health.Direct.Config.Client.CertificateService.Anchor GetAnchor(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetAnchor(owner, thumbprint, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor> GetAnchorAsync(string owner, string thumbprint, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetAnchorAsync(owner, thumbprint, options);
        }
        
        public Health.Direct.Config.Client.CertificateService.Anchor[] GetAnchors(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetAnchors(anchorIDs, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetAnchorsAsync(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetAnchorsAsync(anchorIDs, options);
        }
        
        public Health.Direct.Config.Client.CertificateService.Anchor[] GetAnchorsForOwner(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetAnchorsForOwner(owner, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetAnchorsForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetAnchorsForOwnerAsync(owner, options);
        }
        
        public Health.Direct.Config.Client.CertificateService.Anchor[] GetIncomingAnchors(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetIncomingAnchors(owner, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetIncomingAnchorsAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetIncomingAnchorsAsync(owner, options);
        }
        
        public Health.Direct.Config.Client.CertificateService.Anchor[] GetOutgoingAnchors(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetOutgoingAnchors(owner, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> GetOutgoingAnchorsAsync(string owner, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.GetOutgoingAnchorsAsync(owner, options);
        }
        
        public void SetAnchorStatus(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            base.Channel.SetAnchorStatus(anchorIDs, status);
        }
        
        public System.Threading.Tasks.Task SetAnchorStatusAsync(long[] anchorIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.SetAnchorStatusAsync(anchorIDs, status);
        }
        
        public void SetAnchorStatusForOwner(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            base.Channel.SetAnchorStatusForOwner(owner, status);
        }
        
        public System.Threading.Tasks.Task SetAnchorStatusForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.SetAnchorStatusForOwnerAsync(owner, status);
        }
        
        public Health.Direct.Config.Client.CertificateService.Anchor[] EnumerateAnchors(long lastAnchorID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.EnumerateAnchors(lastAnchorID, maxResults, options);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Anchor[]> EnumerateAnchorsAsync(long lastAnchorID, int maxResults, Health.Direct.Config.Client.CertificateService.CertificateGetOptions options)
        {
            return base.Channel.EnumerateAnchorsAsync(lastAnchorID, maxResults, options);
        }
        
        public void RemoveAnchors(long[] anchorIDs)
        {
            base.Channel.RemoveAnchors(anchorIDs);
        }
        
        public System.Threading.Tasks.Task RemoveAnchorsAsync(long[] anchorIDs)
        {
            return base.Channel.RemoveAnchorsAsync(anchorIDs);
        }
        
        public void RemoveAnchorsForOwner(string owner)
        {
            base.Channel.RemoveAnchorsForOwner(owner);
        }
        
        public System.Threading.Tasks.Task RemoveAnchorsForOwnerAsync(string owner)
        {
            return base.Channel.RemoveAnchorsForOwnerAsync(owner);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAnchorStore))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAnchorStore))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/CertificateService.svc/Anchors");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AnchorStoreClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAnchorStore);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AnchorStoreClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAnchorStore);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAnchorStore,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.CertificateService.IBundleStore")]
    public interface IBundleStore
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/AddBundle", ReplyAction="urn:directproject:config/store/082010/IBundleStore/AddBundleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/AddBundleConfigStoreFaultFault" +
            "", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Bundle AddBundle(Health.Direct.Config.Client.CertificateService.Bundle bundle);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/AddBundle", ReplyAction="urn:directproject:config/store/082010/IBundleStore/AddBundleResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle> AddBundleAsync(Health.Direct.Config.Client.CertificateService.Bundle bundle);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/AddBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/AddBundlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/AddBundlesConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        void AddBundles(Health.Direct.Config.Client.CertificateService.Bundle[] bundles);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/AddBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/AddBundlesResponse")]
        System.Threading.Tasks.Task AddBundlesAsync(Health.Direct.Config.Client.CertificateService.Bundle[] bundles);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetBundle", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetBundleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/GetBundleConfigStoreFaultFault" +
            "", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Bundle GetBundle(long bundleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetBundle", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetBundleResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle> GetBundleAsync(long bundleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetBundlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/GetBundlesConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Bundle[] GetBundles(long[] bundleIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetBundlesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetBundlesAsync(long[] bundleIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetBundlesForOwner", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetBundlesForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/GetBundlesForOwnerConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Bundle[] GetBundlesForOwner(string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetBundlesForOwner", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetBundlesForOwnerResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetBundlesForOwnerAsync(string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetIncomingBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetIncomingBundlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/GetIncomingBundlesConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Bundle[] GetIncomingBundles(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetIncomingBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetIncomingBundlesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetIncomingBundlesAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetOutgoingBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetOutgoingBundlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/GetOutgoingBundlesConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Bundle[] GetOutgoingBundles(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/GetOutgoingBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/GetOutgoingBundlesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetOutgoingBundlesAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/SetBundleStatus", ReplyAction="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        void SetBundleStatus(long[] bundleIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/SetBundleStatus", ReplyAction="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusResponse")]
        System.Threading.Tasks.Task SetBundleStatusAsync(long[] bundleIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusForOwner", ReplyAction="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusForOwnerRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusForOwnerConfigS" +
            "toreFaultFault", Name="ConfigStoreFault")]
        void SetBundleStatusForOwner(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusForOwner", ReplyAction="urn:directproject:config/store/082010/IBundleStore/SetBundleStatusForOwnerRespons" +
            "e")]
        System.Threading.Tasks.Task SetBundleStatusForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/EnumerateBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/EnumerateBundlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/EnumerateBundlesConfigStoreFau" +
            "ltFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.CertificateService.Bundle[] EnumerateBundles(long lastBundleID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/EnumerateBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/EnumerateBundlesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> EnumerateBundlesAsync(long lastBundleID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/RemoveBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesConfigStoreFaultF" +
            "ault", Name="ConfigStoreFault")]
        void RemoveBundles(long[] bundleIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/RemoveBundles", ReplyAction="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesResponse")]
        System.Threading.Tasks.Task RemoveBundlesAsync(long[] bundleIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesForOwner", ReplyAction="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.CertificateService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesForOwnerConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        void RemoveBundlesForOwner(string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesForOwner", ReplyAction="urn:directproject:config/store/082010/IBundleStore/RemoveBundlesForOwnerResponse")]
        System.Threading.Tasks.Task RemoveBundlesForOwnerAsync(string owner);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IBundleStoreChannel : Health.Direct.Config.Client.CertificateService.IBundleStore, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class BundleStoreClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.CertificateService.IBundleStore>, Health.Direct.Config.Client.CertificateService.IBundleStore
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BundleStoreClient() : 
                base(BundleStoreClient.GetDefaultBinding(), BundleStoreClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBundleStore.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BundleStoreClient(EndpointConfiguration endpointConfiguration) : 
                base(BundleStoreClient.GetBindingForEndpoint(endpointConfiguration), BundleStoreClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BundleStoreClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BundleStoreClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BundleStoreClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BundleStoreClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BundleStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Health.Direct.Config.Client.CertificateService.Bundle AddBundle(Health.Direct.Config.Client.CertificateService.Bundle bundle)
        {
            return base.Channel.AddBundle(bundle);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle> AddBundleAsync(Health.Direct.Config.Client.CertificateService.Bundle bundle)
        {
            return base.Channel.AddBundleAsync(bundle);
        }
        
        public void AddBundles(Health.Direct.Config.Client.CertificateService.Bundle[] bundles)
        {
            base.Channel.AddBundles(bundles);
        }
        
        public System.Threading.Tasks.Task AddBundlesAsync(Health.Direct.Config.Client.CertificateService.Bundle[] bundles)
        {
            return base.Channel.AddBundlesAsync(bundles);
        }
        
        public Health.Direct.Config.Client.CertificateService.Bundle GetBundle(long bundleId)
        {
            return base.Channel.GetBundle(bundleId);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle> GetBundleAsync(long bundleId)
        {
            return base.Channel.GetBundleAsync(bundleId);
        }
        
        public Health.Direct.Config.Client.CertificateService.Bundle[] GetBundles(long[] bundleIDs)
        {
            return base.Channel.GetBundles(bundleIDs);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetBundlesAsync(long[] bundleIDs)
        {
            return base.Channel.GetBundlesAsync(bundleIDs);
        }
        
        public Health.Direct.Config.Client.CertificateService.Bundle[] GetBundlesForOwner(string owner)
        {
            return base.Channel.GetBundlesForOwner(owner);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetBundlesForOwnerAsync(string owner)
        {
            return base.Channel.GetBundlesForOwnerAsync(owner);
        }
        
        public Health.Direct.Config.Client.CertificateService.Bundle[] GetIncomingBundles(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.GetIncomingBundles(owner, status);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetIncomingBundlesAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.GetIncomingBundlesAsync(owner, status);
        }
        
        public Health.Direct.Config.Client.CertificateService.Bundle[] GetOutgoingBundles(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.GetOutgoingBundles(owner, status);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> GetOutgoingBundlesAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.GetOutgoingBundlesAsync(owner, status);
        }
        
        public void SetBundleStatus(long[] bundleIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            base.Channel.SetBundleStatus(bundleIDs, status);
        }
        
        public System.Threading.Tasks.Task SetBundleStatusAsync(long[] bundleIDs, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.SetBundleStatusAsync(bundleIDs, status);
        }
        
        public void SetBundleStatusForOwner(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            base.Channel.SetBundleStatusForOwner(owner, status);
        }
        
        public System.Threading.Tasks.Task SetBundleStatusForOwnerAsync(string owner, Health.Direct.Config.Client.CertificateService.EntityStatus status)
        {
            return base.Channel.SetBundleStatusForOwnerAsync(owner, status);
        }
        
        public Health.Direct.Config.Client.CertificateService.Bundle[] EnumerateBundles(long lastBundleID, int maxResults)
        {
            return base.Channel.EnumerateBundles(lastBundleID, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.CertificateService.Bundle[]> EnumerateBundlesAsync(long lastBundleID, int maxResults)
        {
            return base.Channel.EnumerateBundlesAsync(lastBundleID, maxResults);
        }
        
        public void RemoveBundles(long[] bundleIDs)
        {
            base.Channel.RemoveBundles(bundleIDs);
        }
        
        public System.Threading.Tasks.Task RemoveBundlesAsync(long[] bundleIDs)
        {
            return base.Channel.RemoveBundlesAsync(bundleIDs);
        }
        
        public void RemoveBundlesForOwner(string owner)
        {
            base.Channel.RemoveBundlesForOwner(owner);
        }
        
        public System.Threading.Tasks.Task RemoveBundlesForOwnerAsync(string owner)
        {
            return base.Channel.RemoveBundlesForOwnerAsync(owner);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBundleStore))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBundleStore))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/CertificateService.svc/Bundles");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BundleStoreClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBundleStore);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BundleStoreClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBundleStore);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IBundleStore,
        }
    }
}
