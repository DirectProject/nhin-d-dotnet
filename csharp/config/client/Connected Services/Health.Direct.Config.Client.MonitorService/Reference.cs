//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Health.Direct.Config.Client.MonitorService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Mdn", Namespace="urn:directproject:config/store/082010")]
    public partial class Mdn : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private long IdField;
        
        private string MdnIdentifierField;
        
        private string MessageIdField;
        
        private bool NotifyDispatchedField;
        
        private string RecipientField;
        
        private string SenderField;
        
        private string StatusField;
        
        private string SubjectValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                if ((this.IdField.Equals(value) != true))
                {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string MdnIdentifier
        {
            get
            {
                return this.MdnIdentifierField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MdnIdentifierField, value) != true))
                {
                    this.MdnIdentifierField = value;
                    this.RaisePropertyChanged("MdnIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string MessageId
        {
            get
            {
                return this.MessageIdField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageIdField, value) != true))
                {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool NotifyDispatched
        {
            get
            {
                return this.NotifyDispatchedField;
            }
            set
            {
                if ((this.NotifyDispatchedField.Equals(value) != true))
                {
                    this.NotifyDispatchedField = value;
                    this.RaisePropertyChanged("NotifyDispatched");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Recipient
        {
            get
            {
                return this.RecipientField;
            }
            set
            {
                if ((object.ReferenceEquals(this.RecipientField, value) != true))
                {
                    this.RecipientField = value;
                    this.RaisePropertyChanged("Recipient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Sender
        {
            get
            {
                return this.SenderField;
            }
            set
            {
                if ((object.ReferenceEquals(this.SenderField, value) != true))
                {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((object.ReferenceEquals(this.StatusField, value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubjectValue
        {
            get
            {
                return this.SubjectValueField;
            }
            set
            {
                if ((object.ReferenceEquals(this.SubjectValueField, value) != true))
                {
                    this.SubjectValueField = value;
                    this.RaisePropertyChanged("SubjectValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreFault", Namespace="urn:directproject:config/store/082010")]
    public partial class ConfigStoreFault : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private Health.Direct.Config.Client.MonitorService.ConfigStoreError ErrorField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Health.Direct.Config.Client.MonitorService.ConfigStoreError Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                if ((this.ErrorField.Equals(value) != true))
                {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageField, value) != true))
                {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreError", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum ConfigStoreError : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unexpected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conflict = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniqueConstraint = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForeignKeyConstraint = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIDs = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomain = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainNameLength = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAddress = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLength = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayNameLength = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidEmailAddress = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertificate = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidX509Certificate = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertificateData = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidOwnerName = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OwnerLength = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidThumbprint = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAnchor = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountNameLength = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMXSMTPName = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXSMTPNameLength = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMX = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDnsRecord = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotesLength = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAdministrator = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUsername = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPassword = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyName = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyNameLength = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobName = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobNameLength = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBlob = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AgentNameLength = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAgentName = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdnIdentifier = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdn = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateProcessedMdn = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateDispatchedMdn = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateFailedMdn = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyProcessed = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnUncorrelated = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyFailed = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUrl = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UrlLength = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBundle = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateMdnStart = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyName = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyNameLength = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertPolicyData = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicy = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroupName = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroup = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyGroupDescriptionLength = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyUse = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingDomain = 59,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.MonitorService.IMdnMonitor")]
    public interface IMdnMonitor
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/Start", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/StartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.MonitorService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IMdnMonitor/StartConfigStoreFaultFault", Name="ConfigStoreFault")]
        void Start(Health.Direct.Config.Client.MonitorService.Mdn[] mdns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/Start", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/StartResponse")]
        System.Threading.Tasks.Task StartAsync(Health.Direct.Config.Client.MonitorService.Mdn[] mdns);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/Update", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.MonitorService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IMdnMonitor/UpdateConfigStoreFaultFault", Name="ConfigStoreFault")]
        void Update(Health.Direct.Config.Client.MonitorService.Mdn mdn);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/Update", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Health.Direct.Config.Client.MonitorService.Mdn mdn);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredProcessed", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredProcessedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.MonitorService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredProcessedConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.MonitorService.Mdn[] GetExpiredProcessed(System.TimeSpan expiredLimit, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredProcessed", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredProcessedResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.MonitorService.Mdn[]> GetExpiredProcessedAsync(System.TimeSpan expiredLimit, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredDispatched", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredDispatchedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.MonitorService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredDispatchedConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.MonitorService.Mdn[] GetExpiredDispatched(System.TimeSpan expiredLimit, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredDispatched", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/GetExpiredDispatchedResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.MonitorService.Mdn[]> GetExpiredDispatchedAsync(System.TimeSpan expiredLimit, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/SweepTimouts", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/SweepTimoutsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.MonitorService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IMdnMonitor/SweepTimoutsConfigStoreFaultFau" +
            "lt", Name="ConfigStoreFault")]
        void SweepTimouts(System.TimeSpan expiredLimit, int bulkCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/SweepTimouts", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/SweepTimoutsResponse")]
        System.Threading.Tasks.Task SweepTimoutsAsync(System.TimeSpan expiredLimit, int bulkCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/EnumerateMdns", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/EnumerateMdnsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.MonitorService.ConfigStoreFault), Action="urn:directproject:config/store/082010/IMdnMonitor/EnumerateMdnsConfigStoreFaultFa" +
            "ult", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.MonitorService.Mdn[] EnumerateMdns(string lastMdnName, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IMdnMonitor/EnumerateMdns", ReplyAction="urn:directproject:config/store/082010/IMdnMonitor/EnumerateMdnsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.MonitorService.Mdn[]> EnumerateMdnsAsync(string lastMdnName, int maxResults);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IMdnMonitorChannel : Health.Direct.Config.Client.MonitorService.IMdnMonitor, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class MdnMonitorClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.MonitorService.IMdnMonitor>, Health.Direct.Config.Client.MonitorService.IMdnMonitor
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MdnMonitorClient() : 
                base(MdnMonitorClient.GetDefaultBinding(), MdnMonitorClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMdnMonitor.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MdnMonitorClient(EndpointConfiguration endpointConfiguration) : 
                base(MdnMonitorClient.GetBindingForEndpoint(endpointConfiguration), MdnMonitorClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MdnMonitorClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MdnMonitorClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MdnMonitorClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MdnMonitorClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MdnMonitorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void Start(Health.Direct.Config.Client.MonitorService.Mdn[] mdns)
        {
            base.Channel.Start(mdns);
        }
        
        public System.Threading.Tasks.Task StartAsync(Health.Direct.Config.Client.MonitorService.Mdn[] mdns)
        {
            return base.Channel.StartAsync(mdns);
        }
        
        public void Update(Health.Direct.Config.Client.MonitorService.Mdn mdn)
        {
            base.Channel.Update(mdn);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Health.Direct.Config.Client.MonitorService.Mdn mdn)
        {
            return base.Channel.UpdateAsync(mdn);
        }
        
        public Health.Direct.Config.Client.MonitorService.Mdn[] GetExpiredProcessed(System.TimeSpan expiredLimit, int maxResults)
        {
            return base.Channel.GetExpiredProcessed(expiredLimit, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.MonitorService.Mdn[]> GetExpiredProcessedAsync(System.TimeSpan expiredLimit, int maxResults)
        {
            return base.Channel.GetExpiredProcessedAsync(expiredLimit, maxResults);
        }
        
        public Health.Direct.Config.Client.MonitorService.Mdn[] GetExpiredDispatched(System.TimeSpan expiredLimit, int maxResults)
        {
            return base.Channel.GetExpiredDispatched(expiredLimit, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.MonitorService.Mdn[]> GetExpiredDispatchedAsync(System.TimeSpan expiredLimit, int maxResults)
        {
            return base.Channel.GetExpiredDispatchedAsync(expiredLimit, maxResults);
        }
        
        public void SweepTimouts(System.TimeSpan expiredLimit, int bulkCount)
        {
            base.Channel.SweepTimouts(expiredLimit, bulkCount);
        }
        
        public System.Threading.Tasks.Task SweepTimoutsAsync(System.TimeSpan expiredLimit, int bulkCount)
        {
            return base.Channel.SweepTimoutsAsync(expiredLimit, bulkCount);
        }
        
        public Health.Direct.Config.Client.MonitorService.Mdn[] EnumerateMdns(string lastMdnName, int maxResults)
        {
            return base.Channel.EnumerateMdns(lastMdnName, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.MonitorService.Mdn[]> EnumerateMdnsAsync(string lastMdnName, int maxResults)
        {
            return base.Channel.EnumerateMdnsAsync(lastMdnName, maxResults);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMdnMonitor))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMdnMonitor))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/MonitorService.svc/Dispositions");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MdnMonitorClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMdnMonitor);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MdnMonitorClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMdnMonitor);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMdnMonitor,
        }
    }
}
