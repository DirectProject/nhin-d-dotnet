//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Health.Direct.Config.Client.SettingsManager
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="urn:directproject:config/store/082010")]
    public partial class Property : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private string NameField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ValueField, value) != true))
                {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreFault", Namespace="urn:directproject:config/store/082010")]
    public partial class ConfigStoreFault : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private Health.Direct.Config.Client.SettingsManager.ConfigStoreError ErrorField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Health.Direct.Config.Client.SettingsManager.ConfigStoreError Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                if ((this.ErrorField.Equals(value) != true))
                {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageField, value) != true))
                {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreError", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum ConfigStoreError : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unexpected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conflict = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniqueConstraint = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForeignKeyConstraint = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIDs = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomain = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainNameLength = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAddress = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLength = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayNameLength = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidEmailAddress = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertificate = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidX509Certificate = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertificateData = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidOwnerName = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OwnerLength = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidThumbprint = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAnchor = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountNameLength = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMXSMTPName = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXSMTPNameLength = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMX = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDnsRecord = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotesLength = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAdministrator = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUsername = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPassword = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyName = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyNameLength = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobName = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobNameLength = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBlob = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AgentNameLength = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAgentName = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdnIdentifier = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdn = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateProcessedMdn = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateDispatchedMdn = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateFailedMdn = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyProcessed = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnUncorrelated = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyFailed = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUrl = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UrlLength = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBundle = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateMdnStart = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyName = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyNameLength = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertPolicyData = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicy = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroupName = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroup = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyGroupDescriptionLength = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyUse = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingDomain = 59,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NamedBlob", Namespace="urn:directproject:config/store/082010")]
    public partial class NamedBlob : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private byte[] DataField;
        
        private string NameField;
        
        private System.DateTime UpdateDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DataField, value) != true))
                {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this.UpdateDateField;
            }
            set
            {
                if ((this.UpdateDateField.Equals(value) != true))
                {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.SettingsManager.IPropertyManager")]
    public interface IPropertyManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/AddProperty", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/AddPropertyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/AddPropertyConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        void AddProperty(Health.Direct.Config.Client.SettingsManager.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/AddProperty", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/AddPropertyResponse")]
        System.Threading.Tasks.Task AddPropertyAsync(Health.Direct.Config.Client.SettingsManager.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/AddProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/AddPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/AddPropertiesConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        void AddProperties(Health.Direct.Config.Client.SettingsManager.Property[] properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/AddProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/AddPropertiesResponse")]
        System.Threading.Tasks.Task AddPropertiesAsync(Health.Direct.Config.Client.SettingsManager.Property[] properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/SetProperty", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/SetPropertyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/SetPropertyConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        void SetProperty(Health.Direct.Config.Client.SettingsManager.Property properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/SetProperty", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/SetPropertyResponse")]
        System.Threading.Tasks.Task SetPropertyAsync(Health.Direct.Config.Client.SettingsManager.Property properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/SetProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/SetPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/SetPropertiesConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        void SetProperties(Health.Direct.Config.Client.SettingsManager.Property[] properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/SetProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/SetPropertiesResponse")]
        System.Threading.Tasks.Task SetPropertiesAsync(Health.Direct.Config.Client.SettingsManager.Property[] properties);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/GetProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.SettingsManager.Property[] GetProperties(string[] propertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/GetProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.Property[]> GetPropertiesAsync(string[] propertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesByPrefix", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesByPrefixRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesByPrefixConfi" +
            "gStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.SettingsManager.Property[] GetPropertiesByPrefix(string propertyNamePrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesByPrefix", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/GetPropertiesByPrefixRespo" +
            "nse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.Property[]> GetPropertiesByPrefixAsync(string propertyNamePrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/RemoveProperty", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/RemovePropertyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/RemovePropertyConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void RemoveProperty(string propertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/RemoveProperty", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/RemovePropertyResponse")]
        System.Threading.Tasks.Task RemovePropertyAsync(string propertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/RemoveProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/RemovePropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IPropertyManager/RemovePropertiesConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        void RemoveProperties(string[] propertyNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IPropertyManager/RemoveProperties", ReplyAction="urn:directproject:config/store/082010/IPropertyManager/RemovePropertiesResponse")]
        System.Threading.Tasks.Task RemovePropertiesAsync(string[] propertyNames);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IPropertyManagerChannel : Health.Direct.Config.Client.SettingsManager.IPropertyManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class PropertyManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.SettingsManager.IPropertyManager>, Health.Direct.Config.Client.SettingsManager.IPropertyManager
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PropertyManagerClient() : 
                base(PropertyManagerClient.GetDefaultBinding(), PropertyManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPropertyManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(PropertyManagerClient.GetBindingForEndpoint(endpointConfiguration), PropertyManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PropertyManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PropertyManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PropertyManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void AddProperty(Health.Direct.Config.Client.SettingsManager.Property property)
        {
            base.Channel.AddProperty(property);
        }
        
        public System.Threading.Tasks.Task AddPropertyAsync(Health.Direct.Config.Client.SettingsManager.Property property)
        {
            return base.Channel.AddPropertyAsync(property);
        }
        
        public void AddProperties(Health.Direct.Config.Client.SettingsManager.Property[] properties)
        {
            base.Channel.AddProperties(properties);
        }
        
        public System.Threading.Tasks.Task AddPropertiesAsync(Health.Direct.Config.Client.SettingsManager.Property[] properties)
        {
            return base.Channel.AddPropertiesAsync(properties);
        }
        
        public void SetProperty(Health.Direct.Config.Client.SettingsManager.Property properties)
        {
            base.Channel.SetProperty(properties);
        }
        
        public System.Threading.Tasks.Task SetPropertyAsync(Health.Direct.Config.Client.SettingsManager.Property properties)
        {
            return base.Channel.SetPropertyAsync(properties);
        }
        
        public void SetProperties(Health.Direct.Config.Client.SettingsManager.Property[] properties)
        {
            base.Channel.SetProperties(properties);
        }
        
        public System.Threading.Tasks.Task SetPropertiesAsync(Health.Direct.Config.Client.SettingsManager.Property[] properties)
        {
            return base.Channel.SetPropertiesAsync(properties);
        }
        
        public Health.Direct.Config.Client.SettingsManager.Property[] GetProperties(string[] propertyNames)
        {
            return base.Channel.GetProperties(propertyNames);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.Property[]> GetPropertiesAsync(string[] propertyNames)
        {
            return base.Channel.GetPropertiesAsync(propertyNames);
        }
        
        public Health.Direct.Config.Client.SettingsManager.Property[] GetPropertiesByPrefix(string propertyNamePrefix)
        {
            return base.Channel.GetPropertiesByPrefix(propertyNamePrefix);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.Property[]> GetPropertiesByPrefixAsync(string propertyNamePrefix)
        {
            return base.Channel.GetPropertiesByPrefixAsync(propertyNamePrefix);
        }
        
        public void RemoveProperty(string propertyNames)
        {
            base.Channel.RemoveProperty(propertyNames);
        }
        
        public System.Threading.Tasks.Task RemovePropertyAsync(string propertyNames)
        {
            return base.Channel.RemovePropertyAsync(propertyNames);
        }
        
        public void RemoveProperties(string[] propertyNames)
        {
            base.Channel.RemoveProperties(propertyNames);
        }
        
        public System.Threading.Tasks.Task RemovePropertiesAsync(string[] propertyNames)
        {
            return base.Channel.RemovePropertiesAsync(propertyNames);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPropertyManager))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPropertyManager))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/SettingsManager.svc/Properties");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PropertyManagerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPropertyManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PropertyManagerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPropertyManager);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPropertyManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.SettingsManager.IBlobManager")]
    public interface IBlobManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/AddBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/AddBlobResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBlobManager/AddBlobConfigStoreFaultFault", Name="ConfigStoreFault")]
        void AddBlob(Health.Direct.Config.Client.SettingsManager.NamedBlob blob);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/AddBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/AddBlobResponse")]
        System.Threading.Tasks.Task AddBlobAsync(Health.Direct.Config.Client.SettingsManager.NamedBlob blob);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/UpdateBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/UpdateBlobResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBlobManager/UpdateBlobConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        void UpdateBlob(Health.Direct.Config.Client.SettingsManager.NamedBlob blob);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/UpdateBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/UpdateBlobResponse")]
        System.Threading.Tasks.Task UpdateBlobAsync(Health.Direct.Config.Client.SettingsManager.NamedBlob blob);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/GetBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/GetBlobResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBlobManager/GetBlobConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.SettingsManager.NamedBlob GetBlob(string blobName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/GetBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/GetBlobResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.NamedBlob> GetBlobAsync(string blobName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/GetBlobsByPrefix", ReplyAction="urn:directproject:config/store/082010/IBlobManager/GetBlobsByPrefixResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBlobManager/GetBlobsByPrefixConfigStoreFau" +
            "ltFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.SettingsManager.NamedBlob[] GetBlobsByPrefix(string blobNamePrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/GetBlobsByPrefix", ReplyAction="urn:directproject:config/store/082010/IBlobManager/GetBlobsByPrefixResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.NamedBlob[]> GetBlobsByPrefixAsync(string blobNamePrefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/RemoveBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/RemoveBlobResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.SettingsManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IBlobManager/RemoveBlobConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        void RemoveBlob(string blobName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IBlobManager/RemoveBlob", ReplyAction="urn:directproject:config/store/082010/IBlobManager/RemoveBlobResponse")]
        System.Threading.Tasks.Task RemoveBlobAsync(string blobName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IBlobManagerChannel : Health.Direct.Config.Client.SettingsManager.IBlobManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class BlobManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.SettingsManager.IBlobManager>, Health.Direct.Config.Client.SettingsManager.IBlobManager
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BlobManagerClient() : 
                base(BlobManagerClient.GetDefaultBinding(), BlobManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBlobManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlobManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(BlobManagerClient.GetBindingForEndpoint(endpointConfiguration), BlobManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlobManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BlobManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlobManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BlobManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlobManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void AddBlob(Health.Direct.Config.Client.SettingsManager.NamedBlob blob)
        {
            base.Channel.AddBlob(blob);
        }
        
        public System.Threading.Tasks.Task AddBlobAsync(Health.Direct.Config.Client.SettingsManager.NamedBlob blob)
        {
            return base.Channel.AddBlobAsync(blob);
        }
        
        public void UpdateBlob(Health.Direct.Config.Client.SettingsManager.NamedBlob blob)
        {
            base.Channel.UpdateBlob(blob);
        }
        
        public System.Threading.Tasks.Task UpdateBlobAsync(Health.Direct.Config.Client.SettingsManager.NamedBlob blob)
        {
            return base.Channel.UpdateBlobAsync(blob);
        }
        
        public Health.Direct.Config.Client.SettingsManager.NamedBlob GetBlob(string blobName)
        {
            return base.Channel.GetBlob(blobName);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.NamedBlob> GetBlobAsync(string blobName)
        {
            return base.Channel.GetBlobAsync(blobName);
        }
        
        public Health.Direct.Config.Client.SettingsManager.NamedBlob[] GetBlobsByPrefix(string blobNamePrefix)
        {
            return base.Channel.GetBlobsByPrefix(blobNamePrefix);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.SettingsManager.NamedBlob[]> GetBlobsByPrefixAsync(string blobNamePrefix)
        {
            return base.Channel.GetBlobsByPrefixAsync(blobNamePrefix);
        }
        
        public void RemoveBlob(string blobName)
        {
            base.Channel.RemoveBlob(blobName);
        }
        
        public System.Threading.Tasks.Task RemoveBlobAsync(string blobName)
        {
            return base.Channel.RemoveBlobAsync(blobName);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBlobManager))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBlobManager))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/SettingsManager.svc/Blobs");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BlobManagerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBlobManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BlobManagerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBlobManager);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IBlobManager,
        }
    }
}
