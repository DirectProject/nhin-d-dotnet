//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Health.Direct.Config.Client.DomainManager
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="urn:directproject:config/store/082010")]
    public partial class Address : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private string DisplayNameField;
        
        private long DomainIDField;
        
        private string EmailAddressField;
        
        private long IDField;
        
        private Health.Direct.Config.Client.DomainManager.EntityStatus StatusField;
        
        private string TypeField;
        
        private System.DateTime UpdateDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DisplayName
        {
            get
            {
                return this.DisplayNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true))
                {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long DomainID
        {
            get
            {
                return this.DomainIDField;
            }
            set
            {
                if ((this.DomainIDField.Equals(value) != true))
                {
                    this.DomainIDField = value;
                    this.RaisePropertyChanged("DomainID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string EmailAddress
        {
            get
            {
                return this.EmailAddressField;
            }
            set
            {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true))
                {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.DomainManager.EntityStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.TypeField, value) != true))
                {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this.UpdateDateField;
            }
            set
            {
                if ((this.UpdateDateField.Equals(value) != true))
                {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityStatus", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum EntityStatus : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreFault", Namespace="urn:directproject:config/store/082010")]
    public partial class ConfigStoreFault : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private Health.Direct.Config.Client.DomainManager.ConfigStoreError ErrorField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Health.Direct.Config.Client.DomainManager.ConfigStoreError Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                if ((this.ErrorField.Equals(value) != true))
                {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageField, value) != true))
                {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreError", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum ConfigStoreError : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unexpected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conflict = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniqueConstraint = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForeignKeyConstraint = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIDs = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomain = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainNameLength = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAddress = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLength = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayNameLength = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidEmailAddress = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertificate = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidX509Certificate = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertificateData = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidOwnerName = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OwnerLength = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidThumbprint = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAnchor = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountNameLength = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMXSMTPName = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXSMTPNameLength = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMX = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDnsRecord = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotesLength = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAdministrator = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUsername = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPassword = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyName = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyNameLength = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobName = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobNameLength = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBlob = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AgentNameLength = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAgentName = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdnIdentifier = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdn = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateProcessedMdn = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateDispatchedMdn = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateFailedMdn = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyProcessed = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnUncorrelated = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyFailed = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUrl = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UrlLength = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBundle = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateMdnStart = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyName = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyNameLength = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertPolicyData = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicy = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroupName = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroup = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyGroupDescriptionLength = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyUse = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingDomain = 59,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Domain", Namespace="urn:directproject:config/store/082010")]
    public partial class Domain : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private string AgentNameField;
        
        private System.DateTime CreateDateField;
        
        private long IDField;
        
        private string NameField;
        
        private Health.Direct.Config.Client.DomainManager.SecurityStandard SecurityStandardField;
        
        private Health.Direct.Config.Client.DomainManager.EntityStatus StatusField;
        
        private System.DateTime UpdateDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AgentName
        {
            get
            {
                return this.AgentNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AgentNameField, value) != true))
                {
                    this.AgentNameField = value;
                    this.RaisePropertyChanged("AgentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Health.Direct.Config.Client.DomainManager.SecurityStandard SecurityStandard
        {
            get
            {
                return this.SecurityStandardField;
            }
            set
            {
                if ((this.SecurityStandardField.Equals(value) != true))
                {
                    this.SecurityStandardField = value;
                    this.RaisePropertyChanged("SecurityStandard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.DomainManager.EntityStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this.UpdateDateField;
            }
            set
            {
                if ((this.UpdateDateField.Equals(value) != true))
                {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityStandard", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum SecurityStandard : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Software = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fips1402 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fips1402Wrapped = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsRecord", Namespace="urn:directproject:config/store/082010")]
    public partial class DnsRecord : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private string DomainNameField;
        
        private long IDField;
        
        private string NotesField;
        
        private byte[] RecordDataField;
        
        private int TypeIDField;
        
        private System.DateTime UpdateDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DomainName
        {
            get
            {
                return this.DomainNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DomainNameField, value) != true))
                {
                    this.DomainNameField = value;
                    this.RaisePropertyChanged("DomainName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes
        {
            get
            {
                return this.NotesField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NotesField, value) != true))
                {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] RecordData
        {
            get
            {
                return this.RecordDataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.RecordDataField, value) != true))
                {
                    this.RecordDataField = value;
                    this.RaisePropertyChanged("RecordData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TypeID
        {
            get
            {
                return this.TypeIDField;
            }
            set
            {
                if ((this.TypeIDField.Equals(value) != true))
                {
                    this.TypeIDField = value;
                    this.RaisePropertyChanged("TypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this.UpdateDateField;
            }
            set
            {
                if ((this.UpdateDateField.Equals(value) != true))
                {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsStandard.RecordType", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Common.DnsResolver")]
    public enum DnsStandardRecordType : short
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANAME = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MD = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CNAME = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SOA = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MB = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MG = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MR = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NULL = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WKS = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PTR = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HINFO = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINFO = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MX = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TXT = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AAAA = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SRV = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CERT = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AXFR = 252,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MAILB = 253,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MAILA = 254,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STAR = 255,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertPolicy", Namespace="urn:directproject:config/store/082010")]
    public partial class CertPolicy : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private byte[] DataField;
        
        private string DescriptionField;
        
        private long IDField;
        
        private string LexiconField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DataField, value) != true))
                {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true))
                {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Lexicon
        {
            get
            {
                return this.LexiconField;
            }
            set
            {
                if ((object.ReferenceEquals(this.LexiconField, value) != true))
                {
                    this.LexiconField = value;
                    this.RaisePropertyChanged("Lexicon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertPolicyUse", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum CertPolicyUse : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TRUST = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PRIVATE_RESOLVER = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PUBLIC_RESOLVER = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VALIDATION = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertPolicyGroup", Namespace="urn:directproject:config/store/082010")]
    public partial class CertPolicyGroup : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private string DescriptionField;
        
        private long IDField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true))
                {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertPolicyGroupMap", Namespace="urn:directproject:config/store/082010")]
    public partial class CertPolicyGroupMap : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private Health.Direct.Config.Client.DomainManager.CertPolicy CertPolicyField;
        
        private Health.Direct.Config.Client.DomainManager.CertPolicyGroup CertPolicyGroupField;
        
        private System.DateTime CreateDateField;
        
        private bool ForIncomingField;
        
        private bool ForOutgoingField;
        
        private long IDField;
        
        private Health.Direct.Config.Client.DomainManager.CertPolicyUse UseField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.DomainManager.CertPolicy CertPolicy
        {
            get
            {
                return this.CertPolicyField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CertPolicyField, value) != true))
                {
                    this.CertPolicyField = value;
                    this.RaisePropertyChanged("CertPolicy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroup CertPolicyGroup
        {
            get
            {
                return this.CertPolicyGroupField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CertPolicyGroupField, value) != true))
                {
                    this.CertPolicyGroupField = value;
                    this.RaisePropertyChanged("CertPolicyGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ForIncoming
        {
            get
            {
                return this.ForIncomingField;
            }
            set
            {
                if ((this.ForIncomingField.Equals(value) != true))
                {
                    this.ForIncomingField = value;
                    this.RaisePropertyChanged("ForIncoming");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool ForOutgoing
        {
            get
            {
                return this.ForOutgoingField;
            }
            set
            {
                if ((this.ForOutgoingField.Equals(value) != true))
                {
                    this.ForOutgoingField = value;
                    this.RaisePropertyChanged("ForOutgoing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.DomainManager.CertPolicyUse Use
        {
            get
            {
                return this.UseField;
            }
            set
            {
                if ((this.UseField.Equals(value) != true))
                {
                    this.UseField = value;
                    this.RaisePropertyChanged("Use");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertPolicyGroupDomainMap", Namespace="urn:directproject:config/store/082010")]
    public partial class CertPolicyGroupDomainMap : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private Health.Direct.Config.Client.DomainManager.CertPolicyGroup CertPolicyGroupField;
        
        private System.DateTime CreateDateField;
        
        private long IDField;
        
        private string OwnerField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroup CertPolicyGroup
        {
            get
            {
                return this.CertPolicyGroupField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CertPolicyGroupField, value) != true))
                {
                    this.CertPolicyGroupField = value;
                    this.RaisePropertyChanged("CertPolicyGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Owner
        {
            get
            {
                return this.OwnerField;
            }
            set
            {
                if ((object.ReferenceEquals(this.OwnerField, value) != true))
                {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.DomainManager.IAddressManager")]
    public interface IAddressManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/AddAddress", ReplyAction="urn:directproject:config/store/082010/IAddressManager/AddAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/AddAddressConfigStoreFaultF" +
            "ault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Address AddAddress(Health.Direct.Config.Client.DomainManager.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/AddAddress", ReplyAction="urn:directproject:config/store/082010/IAddressManager/AddAddressResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address> AddAddressAsync(Health.Direct.Config.Client.DomainManager.Address address);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/AddAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/AddAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/AddAddressesConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        void AddAddresses(Health.Direct.Config.Client.DomainManager.Address[] addresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/AddAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/AddAddressesResponse")]
        System.Threading.Tasks.Task AddAddressesAsync(Health.Direct.Config.Client.DomainManager.Address[] addresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/UpdateAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/UpdateAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/UpdateAddressesConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void UpdateAddresses(Health.Direct.Config.Client.DomainManager.Address[] address);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/UpdateAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/UpdateAddressesResponse")]
        System.Threading.Tasks.Task UpdateAddressesAsync(Health.Direct.Config.Client.DomainManager.Address[] address);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesConfigStoreFaul" +
            "tFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Address[] GetAddresses(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> GetAddressesAsync(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesOrDomain", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesOrDomainRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesOrDomainConfigS" +
            "toreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Address[] GetAddressesOrDomain(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesOrDomain", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesOrDomainRespons" +
            "e")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> GetAddressesOrDomainAsync(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesByID", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesByIDConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Address[] GetAddressesByID(long[] addressIDs, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressesByID", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressesByIDResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> GetAddressesByIDAsync(long[] addressIDs, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/RemoveAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/RemoveAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/RemoveAddressesConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void RemoveAddresses(string[] emailAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/RemoveAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/RemoveAddressesResponse")]
        System.Threading.Tasks.Task RemoveAddressesAsync(string[] emailAddresses);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddressesRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddressesConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        void RemoveDomainAddresses(long domainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/RemoveDomainAddressesRespon" +
            "se")]
        System.Threading.Tasks.Task RemoveDomainAddressesAsync(long domainID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatus", ReplyAction="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatusRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatusCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        void SetDomainAddressesStatus(long domainID, Health.Direct.Config.Client.DomainManager.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatus", ReplyAction="urn:directproject:config/store/082010/IAddressManager/SetDomainAddressesStatusRes" +
            "ponse")]
        System.Threading.Tasks.Task SetDomainAddressesStatusAsync(long domainID, Health.Direct.Config.Client.DomainManager.EntityStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressCount", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/GetAddressCountConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        int GetAddressCount(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/GetAddressCount", ReplyAction="urn:directproject:config/store/082010/IAddressManager/GetAddressCountResponse")]
        System.Threading.Tasks.Task<int> GetAddressCountAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddressesRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddressesCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Address[] EnumerateDomainAddresses(string domainName, string lastAddress, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/EnumerateDomainAddressesRes" +
            "ponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> EnumerateDomainAddressesAsync(string domainName, string lastAddress, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/EnumerateAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/EnumerateAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IAddressManager/EnumerateAddressesConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Address[] EnumerateAddresses(string lastAddress, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IAddressManager/EnumerateAddresses", ReplyAction="urn:directproject:config/store/082010/IAddressManager/EnumerateAddressesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> EnumerateAddressesAsync(string lastAddress, int maxResults);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IAddressManagerChannel : Health.Direct.Config.Client.DomainManager.IAddressManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class AddressManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.DomainManager.IAddressManager>, Health.Direct.Config.Client.DomainManager.IAddressManager
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AddressManagerClient() : 
                base(AddressManagerClient.GetDefaultBinding(), AddressManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAddressManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddressManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(AddressManagerClient.GetBindingForEndpoint(endpointConfiguration), AddressManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddressManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AddressManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddressManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AddressManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AddressManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Health.Direct.Config.Client.DomainManager.Address AddAddress(Health.Direct.Config.Client.DomainManager.Address address)
        {
            return base.Channel.AddAddress(address);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address> AddAddressAsync(Health.Direct.Config.Client.DomainManager.Address address)
        {
            return base.Channel.AddAddressAsync(address);
        }
        
        public void AddAddresses(Health.Direct.Config.Client.DomainManager.Address[] addresses)
        {
            base.Channel.AddAddresses(addresses);
        }
        
        public System.Threading.Tasks.Task AddAddressesAsync(Health.Direct.Config.Client.DomainManager.Address[] addresses)
        {
            return base.Channel.AddAddressesAsync(addresses);
        }
        
        public void UpdateAddresses(Health.Direct.Config.Client.DomainManager.Address[] address)
        {
            base.Channel.UpdateAddresses(address);
        }
        
        public System.Threading.Tasks.Task UpdateAddressesAsync(Health.Direct.Config.Client.DomainManager.Address[] address)
        {
            return base.Channel.UpdateAddressesAsync(address);
        }
        
        public Health.Direct.Config.Client.DomainManager.Address[] GetAddresses(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAddresses(emailAddresses, status);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> GetAddressesAsync(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAddressesAsync(emailAddresses, status);
        }
        
        public Health.Direct.Config.Client.DomainManager.Address[] GetAddressesOrDomain(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAddressesOrDomain(emailAddresses, status);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> GetAddressesOrDomainAsync(string[] emailAddresses, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAddressesOrDomainAsync(emailAddresses, status);
        }
        
        public Health.Direct.Config.Client.DomainManager.Address[] GetAddressesByID(long[] addressIDs, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAddressesByID(addressIDs, status);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> GetAddressesByIDAsync(long[] addressIDs, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAddressesByIDAsync(addressIDs, status);
        }
        
        public void RemoveAddresses(string[] emailAddresses)
        {
            base.Channel.RemoveAddresses(emailAddresses);
        }
        
        public System.Threading.Tasks.Task RemoveAddressesAsync(string[] emailAddresses)
        {
            return base.Channel.RemoveAddressesAsync(emailAddresses);
        }
        
        public void RemoveDomainAddresses(long domainID)
        {
            base.Channel.RemoveDomainAddresses(domainID);
        }
        
        public System.Threading.Tasks.Task RemoveDomainAddressesAsync(long domainID)
        {
            return base.Channel.RemoveDomainAddressesAsync(domainID);
        }
        
        public void SetDomainAddressesStatus(long domainID, Health.Direct.Config.Client.DomainManager.EntityStatus status)
        {
            base.Channel.SetDomainAddressesStatus(domainID, status);
        }
        
        public System.Threading.Tasks.Task SetDomainAddressesStatusAsync(long domainID, Health.Direct.Config.Client.DomainManager.EntityStatus status)
        {
            return base.Channel.SetDomainAddressesStatusAsync(domainID, status);
        }
        
        public int GetAddressCount(string domainName)
        {
            return base.Channel.GetAddressCount(domainName);
        }
        
        public System.Threading.Tasks.Task<int> GetAddressCountAsync(string domainName)
        {
            return base.Channel.GetAddressCountAsync(domainName);
        }
        
        public Health.Direct.Config.Client.DomainManager.Address[] EnumerateDomainAddresses(string domainName, string lastAddress, int maxResults)
        {
            return base.Channel.EnumerateDomainAddresses(domainName, lastAddress, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> EnumerateDomainAddressesAsync(string domainName, string lastAddress, int maxResults)
        {
            return base.Channel.EnumerateDomainAddressesAsync(domainName, lastAddress, maxResults);
        }
        
        public Health.Direct.Config.Client.DomainManager.Address[] EnumerateAddresses(string lastAddress, int maxResults)
        {
            return base.Channel.EnumerateAddresses(lastAddress, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Address[]> EnumerateAddressesAsync(string lastAddress, int maxResults)
        {
            return base.Channel.EnumerateAddressesAsync(lastAddress, maxResults);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAddressManager))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAddressManager))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/DomainManagerService.svc/Addresses");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AddressManagerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAddressManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AddressManagerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAddressManager);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAddressManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.DomainManager.IDomainManager")]
    public interface IDomainManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/AddDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/AddDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/AddDomainConfigStoreFaultFau" +
            "lt", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Domain AddDomain(Health.Direct.Config.Client.DomainManager.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/AddDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/AddDomainResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain> AddDomainAsync(Health.Direct.Config.Client.DomainManager.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/UpdateDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/UpdateDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/UpdateDomainConfigStoreFault" +
            "Fault", Name="ConfigStoreFault")]
        void UpdateDomain(Health.Direct.Config.Client.DomainManager.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/UpdateDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/UpdateDomainResponse")]
        System.Threading.Tasks.Task UpdateDomainAsync(Health.Direct.Config.Client.DomainManager.Domain domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/GetDomainConfigStoreFaultFau" +
            "lt", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Domain GetDomain(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain> GetDomainAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomainCount", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainCountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/GetDomainCountConfigStoreFau" +
            "ltFault", Name="ConfigStoreFault")]
        int GetDomainCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomainCount", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainCountResponse")]
        System.Threading.Tasks.Task<int> GetDomainCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/GetDomainsConfigStoreFaultFa" +
            "ult", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Domain[] GetDomains(string[] domainNames, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetDomainsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain[]> GetDomainsAsync(string[] domainNames, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetAgentDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetAgentDomainsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/GetAgentDomainsConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Domain[] GetAgentDomains(string agentName, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/GetAgentDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/GetAgentDomainsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain[]> GetAgentDomainsAsync(string agentName, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/RemoveDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/RemoveDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/RemoveDomainConfigStoreFault" +
            "Fault", Name="ConfigStoreFault")]
        void RemoveDomain(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/RemoveDomain", ReplyAction="urn:directproject:config/store/082010/IDomainManager/RemoveDomainResponse")]
        System.Threading.Tasks.Task RemoveDomainAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/EnumerateDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/EnumerateDomainsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDomainManager/EnumerateDomainsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.Domain[] EnumerateDomains(string lastDomainName, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDomainManager/EnumerateDomains", ReplyAction="urn:directproject:config/store/082010/IDomainManager/EnumerateDomainsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain[]> EnumerateDomainsAsync(string lastDomainName, int maxResults);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IDomainManagerChannel : Health.Direct.Config.Client.DomainManager.IDomainManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class DomainManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.DomainManager.IDomainManager>, Health.Direct.Config.Client.DomainManager.IDomainManager
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DomainManagerClient() : 
                base(DomainManagerClient.GetDefaultBinding(), DomainManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDomainManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DomainManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(DomainManagerClient.GetBindingForEndpoint(endpointConfiguration), DomainManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DomainManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DomainManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DomainManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DomainManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DomainManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Health.Direct.Config.Client.DomainManager.Domain AddDomain(Health.Direct.Config.Client.DomainManager.Domain domain)
        {
            return base.Channel.AddDomain(domain);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain> AddDomainAsync(Health.Direct.Config.Client.DomainManager.Domain domain)
        {
            return base.Channel.AddDomainAsync(domain);
        }
        
        public void UpdateDomain(Health.Direct.Config.Client.DomainManager.Domain domain)
        {
            base.Channel.UpdateDomain(domain);
        }
        
        public System.Threading.Tasks.Task UpdateDomainAsync(Health.Direct.Config.Client.DomainManager.Domain domain)
        {
            return base.Channel.UpdateDomainAsync(domain);
        }
        
        public Health.Direct.Config.Client.DomainManager.Domain GetDomain(long id)
        {
            return base.Channel.GetDomain(id);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain> GetDomainAsync(long id)
        {
            return base.Channel.GetDomainAsync(id);
        }
        
        public int GetDomainCount()
        {
            return base.Channel.GetDomainCount();
        }
        
        public System.Threading.Tasks.Task<int> GetDomainCountAsync()
        {
            return base.Channel.GetDomainCountAsync();
        }
        
        public Health.Direct.Config.Client.DomainManager.Domain[] GetDomains(string[] domainNames, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetDomains(domainNames, status);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain[]> GetDomainsAsync(string[] domainNames, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetDomainsAsync(domainNames, status);
        }
        
        public Health.Direct.Config.Client.DomainManager.Domain[] GetAgentDomains(string agentName, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAgentDomains(agentName, status);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain[]> GetAgentDomainsAsync(string agentName, System.Nullable<Health.Direct.Config.Client.DomainManager.EntityStatus> status)
        {
            return base.Channel.GetAgentDomainsAsync(agentName, status);
        }
        
        public void RemoveDomain(string domainName)
        {
            base.Channel.RemoveDomain(domainName);
        }
        
        public System.Threading.Tasks.Task RemoveDomainAsync(string domainName)
        {
            return base.Channel.RemoveDomainAsync(domainName);
        }
        
        public Health.Direct.Config.Client.DomainManager.Domain[] EnumerateDomains(string lastDomainName, int maxResults)
        {
            return base.Channel.EnumerateDomains(lastDomainName, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.Domain[]> EnumerateDomainsAsync(string lastDomainName, int maxResults)
        {
            return base.Channel.EnumerateDomainsAsync(lastDomainName, maxResults);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDomainManager))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDomainManager))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/DomainManagerService.svc/Domains");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DomainManagerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDomainManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DomainManagerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDomainManager);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IDomainManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.DomainManager.IDnsRecordManager")]
    public interface IDnsRecordManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void AddDnsRecords(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordsResponse")]
        System.Threading.Tasks.Task AddDnsRecordsAsync(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord AddDnsRecord(Health.Direct.Config.Client.DomainManager.DnsRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/AddDnsRecordResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord> AddDnsRecordAsync(Health.Direct.Config.Client.DomainManager.DnsRecord record);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/Count", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/CountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/CountConfigStoreFaultFaul" +
            "t", Name="ConfigStoreFault")]
        int Count(System.Nullable<Health.Direct.Config.Client.DomainManager.DnsStandardRecordType> recordType);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/Count", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/CountResponse")]
        System.Threading.Tasks.Task<int> CountAsync(System.Nullable<Health.Direct.Config.Client.DomainManager.DnsStandardRecordType> recordType);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecordsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecordsConfigSt" +
            "oreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord[] GetLastDnsRecords(long lastRecordID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetLastDnsRecordsResponse" +
            "")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetLastDnsRecordsAsync(long lastRecordID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord GetDnsRecord(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord> GetDnsRecordAsync(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordsConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord[] GetDnsRecords(long[] recordIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetDnsRecordsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetDnsRecordsAsync(long[] recordIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord[] GetMatchingDnsRecords(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsResp" +
            "onse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetMatchingDnsRecordsAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "pe", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "peResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "peConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord[] GetMatchingDnsRecordsByType(string domainName, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "pe", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/GetMatchingDnsRecordsByTy" +
            "peResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetMatchingDnsRecordsByTypeAsync(string domainName, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        void RemoveDnsRecord(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordResponse")]
        System.Threading.Tasks.Task RemoveDnsRecordAsync(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByID", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByIDRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByIDConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        void RemoveDnsRecordByID(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByID", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/RemoveDnsRecordByIDRespon" +
            "se")]
        System.Threading.Tasks.Task RemoveDnsRecordByIDAsync(long recordID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        void UpdateDnsRecord(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecord", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordResponse")]
        System.Threading.Tasks.Task UpdateDnsRecordAsync(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordsConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        void UpdateDnsRecords(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/UpdateDnsRecordsResponse")]
        System.Threading.Tasks.Task UpdateDnsRecordsAsync(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord[] EnumerateDnsRecords(long lastID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecords", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsRespon" +
            "se")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> EnumerateDnsRecordsAsync(long lastID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsByType" +
            "", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsByType" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsByType" +
            "ConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.DnsRecord[] EnumerateDnsRecordsByType(long lastID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsByType" +
            "", ReplyAction="urn:directproject:config/store/082010/IDnsRecordManager/EnumerateDnsRecordsByType" +
            "Response")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> EnumerateDnsRecordsByTypeAsync(long lastID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IDnsRecordManagerChannel : Health.Direct.Config.Client.DomainManager.IDnsRecordManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class DnsRecordManagerClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.DomainManager.IDnsRecordManager>, Health.Direct.Config.Client.DomainManager.IDnsRecordManager
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DnsRecordManagerClient() : 
                base(DnsRecordManagerClient.GetDefaultBinding(), DnsRecordManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDnsRecordManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DnsRecordManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(DnsRecordManagerClient.GetBindingForEndpoint(endpointConfiguration), DnsRecordManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DnsRecordManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DnsRecordManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DnsRecordManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DnsRecordManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DnsRecordManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void AddDnsRecords(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords)
        {
            base.Channel.AddDnsRecords(dnsRecords);
        }
        
        public System.Threading.Tasks.Task AddDnsRecordsAsync(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords)
        {
            return base.Channel.AddDnsRecordsAsync(dnsRecords);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord AddDnsRecord(Health.Direct.Config.Client.DomainManager.DnsRecord record)
        {
            return base.Channel.AddDnsRecord(record);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord> AddDnsRecordAsync(Health.Direct.Config.Client.DomainManager.DnsRecord record)
        {
            return base.Channel.AddDnsRecordAsync(record);
        }
        
        public int Count(System.Nullable<Health.Direct.Config.Client.DomainManager.DnsStandardRecordType> recordType)
        {
            return base.Channel.Count(recordType);
        }
        
        public System.Threading.Tasks.Task<int> CountAsync(System.Nullable<Health.Direct.Config.Client.DomainManager.DnsStandardRecordType> recordType)
        {
            return base.Channel.CountAsync(recordType);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord[] GetLastDnsRecords(long lastRecordID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID)
        {
            return base.Channel.GetLastDnsRecords(lastRecordID, maxResults, typeID);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetLastDnsRecordsAsync(long lastRecordID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID)
        {
            return base.Channel.GetLastDnsRecordsAsync(lastRecordID, maxResults, typeID);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord GetDnsRecord(long recordID)
        {
            return base.Channel.GetDnsRecord(recordID);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord> GetDnsRecordAsync(long recordID)
        {
            return base.Channel.GetDnsRecordAsync(recordID);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord[] GetDnsRecords(long[] recordIDs)
        {
            return base.Channel.GetDnsRecords(recordIDs);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetDnsRecordsAsync(long[] recordIDs)
        {
            return base.Channel.GetDnsRecordsAsync(recordIDs);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord[] GetMatchingDnsRecords(string domainName)
        {
            return base.Channel.GetMatchingDnsRecords(domainName);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetMatchingDnsRecordsAsync(string domainName)
        {
            return base.Channel.GetMatchingDnsRecordsAsync(domainName);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord[] GetMatchingDnsRecordsByType(string domainName, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID)
        {
            return base.Channel.GetMatchingDnsRecordsByType(domainName, typeID);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> GetMatchingDnsRecordsByTypeAsync(string domainName, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType typeID)
        {
            return base.Channel.GetMatchingDnsRecordsByTypeAsync(domainName, typeID);
        }
        
        public void RemoveDnsRecord(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord)
        {
            base.Channel.RemoveDnsRecord(dnsRecord);
        }
        
        public System.Threading.Tasks.Task RemoveDnsRecordAsync(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord)
        {
            return base.Channel.RemoveDnsRecordAsync(dnsRecord);
        }
        
        public void RemoveDnsRecordByID(long recordID)
        {
            base.Channel.RemoveDnsRecordByID(recordID);
        }
        
        public System.Threading.Tasks.Task RemoveDnsRecordByIDAsync(long recordID)
        {
            return base.Channel.RemoveDnsRecordByIDAsync(recordID);
        }
        
        public void UpdateDnsRecord(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord)
        {
            base.Channel.UpdateDnsRecord(dnsRecord);
        }
        
        public System.Threading.Tasks.Task UpdateDnsRecordAsync(Health.Direct.Config.Client.DomainManager.DnsRecord dnsRecord)
        {
            return base.Channel.UpdateDnsRecordAsync(dnsRecord);
        }
        
        public void UpdateDnsRecords(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords)
        {
            base.Channel.UpdateDnsRecords(dnsRecords);
        }
        
        public System.Threading.Tasks.Task UpdateDnsRecordsAsync(Health.Direct.Config.Client.DomainManager.DnsRecord[] dnsRecords)
        {
            return base.Channel.UpdateDnsRecordsAsync(dnsRecords);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord[] EnumerateDnsRecords(long lastID, int maxResults)
        {
            return base.Channel.EnumerateDnsRecords(lastID, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> EnumerateDnsRecordsAsync(long lastID, int maxResults)
        {
            return base.Channel.EnumerateDnsRecordsAsync(lastID, maxResults);
        }
        
        public Health.Direct.Config.Client.DomainManager.DnsRecord[] EnumerateDnsRecordsByType(long lastID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType type)
        {
            return base.Channel.EnumerateDnsRecordsByType(lastID, maxResults, type);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.DnsRecord[]> EnumerateDnsRecordsByTypeAsync(long lastID, int maxResults, Health.Direct.Config.Client.DomainManager.DnsStandardRecordType type)
        {
            return base.Channel.EnumerateDnsRecordsByTypeAsync(lastID, maxResults, type);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDnsRecordManager))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDnsRecordManager))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/DomainManagerService.svc/DnsRecords");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DnsRecordManagerClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDnsRecordManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DnsRecordManagerClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDnsRecordManager);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IDnsRecordManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.DomainManager.ICertPolicyStore")]
    public interface ICertPolicyStore
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByName", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByNameConfigStore" +
            "FaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicy GetPolicyByName(string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByName", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByNameResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy> GetPolicyByNameAsync(string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPoliciesCount", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPoliciesCountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPoliciesCountConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        int GetCertPoliciesCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPoliciesCount", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPoliciesCountRespon" +
            "se")]
        System.Threading.Tasks.Task<int> GetCertPoliciesCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByID", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByIDConfigStoreFa" +
            "ultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicy GetPolicyByID(long policyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByID", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyByIDResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy> GetPolicyByIDAsync(long policyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetIncomingPoliciesByOwner" +
            "", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetIncomingPoliciesByOwner" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetIncomingPoliciesByOwner" +
            "ConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicy[] GetIncomingPoliciesByOwner(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetIncomingPoliciesByOwner" +
            "", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetIncomingPoliciesByOwner" +
            "Response")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy[]> GetIncomingPoliciesByOwnerAsync(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetOutgoingPoliciesByOwner" +
            "", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetOutgoingPoliciesByOwner" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetOutgoingPoliciesByOwner" +
            "ConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicy[] GetOutgoingPoliciesByOwner(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetOutgoingPoliciesByOwner" +
            "", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetOutgoingPoliciesByOwner" +
            "Response")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy[]> GetOutgoingPoliciesByOwnerAsync(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/PolicyToGroupExists", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/PolicyToGroupExistsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/PolicyToGroupExistsConfigS" +
            "toreFaultFault", Name="ConfigStoreFault")]
        bool PolicyToGroupExists(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/PolicyToGroupExists", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/PolicyToGroupExistsRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> PolicyToGroupExistsAsync(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/PolicyGroupToOwnerExists", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/PolicyGroupToOwnerExistsRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/PolicyGroupToOwnerExistsCo" +
            "nfigStoreFaultFault", Name="ConfigStoreFault")]
        bool PolicyGroupToOwnerExists(string policyGroup, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/PolicyGroupToOwnerExists", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/PolicyGroupToOwnerExistsRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> PolicyGroupToOwnerExistsAsync(string policyGroup, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPolicies", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPoliciesRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPoliciesConfi" +
            "gStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicy[] EnumerateCertPolicies(long lastCertPolicyID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPolicies", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPoliciesRespo" +
            "nse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy[]> EnumerateCertPoliciesAsync(long lastCertPolicyID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicy", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyConfigStoreFaultF" +
            "ault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicy AddPolicy(Health.Direct.Config.Client.DomainManager.CertPolicy policy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicy", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy> AddPolicyAsync(Health.Direct.Config.Client.DomainManager.CertPolicy policy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicies", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePoliciesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePoliciesConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        void RemovePolicies(long[] policyIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicies", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePoliciesResponse")]
        System.Threading.Tasks.Task RemovePoliciesAsync(long[] policyIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicy", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyConfigStoreFau" +
            "ltFault", Name="ConfigStoreFault")]
        void RemovePolicy(string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicy", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyResponse")]
        System.Threading.Tasks.Task RemovePolicyAsync(string policyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/UpdatePolicyAttributes", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/UpdatePolicyAttributesResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/UpdatePolicyAttributesConf" +
            "igStoreFaultFault", Name="ConfigStoreFault")]
        void UpdatePolicyAttributes(Health.Direct.Config.Client.DomainManager.CertPolicy certPolicy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/UpdatePolicyAttributes", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/UpdatePolicyAttributesResp" +
            "onse")]
        System.Threading.Tasks.Task UpdatePolicyAttributesAsync(Health.Direct.Config.Client.DomainManager.CertPolicy certPolicy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPolicyGroups", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPolicyGroupsR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPolicyGroupsC" +
            "onfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicyGroup[] EnumerateCertPolicyGroups(long lastCertPolicyGroupID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPolicyGroups", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/EnumerateCertPolicyGroupsR" +
            "esponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup[]> EnumerateCertPolicyGroupsAsync(long lastCertPolicyGroupID, int maxResults);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByName", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameConfig" +
            "StoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicyGroup GetPolicyGroupByName(string policyGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByName", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameRespon" +
            "se")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup> GetPolicyGroupByNameAsync(string policyGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithPo" +
            "licies", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithPo" +
            "liciesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithPo" +
            "liciesConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicyGroupMap[] GetPolicyGroupByNameWithPolicies(string policyGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithPo" +
            "licies", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithPo" +
            "liciesResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroupMap[]> GetPolicyGroupByNameWithPoliciesAsync(string policyGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithOw" +
            "ners", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithOw" +
            "nersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithOw" +
            "nersConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicyGroupDomainMap[] GetPolicyGroupByNameWithOwners(string policyGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithOw" +
            "ners", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByNameWithOw" +
            "nersResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroupDomainMap[]> GetPolicyGroupByNameWithOwnersAsync(string policyGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPolicyGroupCount", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPolicyGroupCountRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPolicyGroupCountCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        int GetCertPolicyGroupCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPolicyGroupCount", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetCertPolicyGroupCountRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> GetCertPolicyGroupCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByID", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByIDResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByIDConfigSt" +
            "oreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicyGroup GetPolicyGroupByID(long policyGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByID", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupByIDResponse" +
            "")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup> GetPolicyGroupByIDAsync(long policyGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyGroupConfigStoreF" +
            "aultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicyGroup AddPolicyGroup(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyGroupResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup> AddPolicyGroupAsync(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policy);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroups", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroupsResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroupsConfigSt" +
            "oreFaultFault", Name="ConfigStoreFault")]
        void RemovePolicyGroups(long[] policyGroupIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroups", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroupsResponse" +
            "")]
        System.Threading.Tasks.Task RemovePolicyGroupsAsync(long[] policyGroupIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroupConfigSto" +
            "reFaultFault", Name="ConfigStoreFault")]
        void RemovePolicyGroup(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyGroupResponse")]
        System.Threading.Tasks.Task RemovePolicyGroupAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/UpdateGroupAttributes", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/UpdateGroupAttributesRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/UpdateGroupAttributesConfi" +
            "gStoreFaultFault", Name="ConfigStoreFault")]
        void UpdateGroupAttributes(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policyGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/UpdateGroupAttributes", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/UpdateGroupAttributesRespo" +
            "nse")]
        System.Threading.Tasks.Task UpdateGroupAttributesAsync(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policyGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyToGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyToGroupResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyToGroupConfigStor" +
            "eFaultFault", Name="ConfigStoreFault")]
        void AddPolicyToGroup(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyToGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AddPolicyToGroupResponse")]
        System.Threading.Tasks.Task AddPolicyToGroupAsync(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyUseFromGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyUseFromGroupRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyUseFromGroupCo" +
            "nfigStoreFaultFault", Name="ConfigStoreFault")]
        void RemovePolicyUseFromGroup(long policyGroupMapId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyUseFromGroup", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/RemovePolicyUseFromGroupRe" +
            "sponse")]
        System.Threading.Tasks.Task RemovePolicyUseFromGroupAsync(long policyGroupMapId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AssociatePolicyGroupToDoma" +
            "in", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AssociatePolicyGroupToDoma" +
            "inResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/AssociatePolicyGroupToDoma" +
            "inConfigStoreFaultFault", Name="ConfigStoreFault")]
        void AssociatePolicyGroupToDomain(string groupName, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/AssociatePolicyGroupToDoma" +
            "in", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/AssociatePolicyGroupToDoma" +
            "inResponse")]
        System.Threading.Tasks.Task AssociatePolicyGroupToDomainAsync(string groupName, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomain", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomainConfigStoreFaultFault", Name="ConfigStoreFault")]
        void DisassociatePolicyGroupFromDomain(string groupName, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomain", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomainResponse")]
        System.Threading.Tasks.Task DisassociatePolicyGroupFromDomainAsync(string groupName, string owner);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupsFr" +
            "omDomain", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupsFr" +
            "omDomainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupsFr" +
            "omDomainConfigStoreFaultFault", Name="ConfigStoreFault")]
        void DisassociatePolicyGroupsFromDomain(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupsFr" +
            "omDomain", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupsFr" +
            "omDomainResponse")]
        System.Threading.Tasks.Task DisassociatePolicyGroupsFromDomainAsync(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomains", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomainsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomainsConfigStoreFaultFault", Name="ConfigStoreFault")]
        void DisassociatePolicyGroupFromDomains(long policyGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomains", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/DisassociatePolicyGroupFro" +
            "mDomainsResponse")]
        System.Threading.Tasks.Task DisassociatePolicyGroupFromDomainsAsync(long policyGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupsByDomain", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupsByDomainRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.DomainManager.ConfigStoreFault), Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupsByDomainCon" +
            "figStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.DomainManager.CertPolicyGroup[] GetPolicyGroupsByDomain(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupsByDomain", ReplyAction="urn:directproject:config/store/082010/ICertPolicyStore/GetPolicyGroupsByDomainRes" +
            "ponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup[]> GetPolicyGroupsByDomainAsync(string domain);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface ICertPolicyStoreChannel : Health.Direct.Config.Client.DomainManager.ICertPolicyStore, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class CertPolicyStoreClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.DomainManager.ICertPolicyStore>, Health.Direct.Config.Client.DomainManager.ICertPolicyStore
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CertPolicyStoreClient() : 
                base(CertPolicyStoreClient.GetDefaultBinding(), CertPolicyStoreClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICertPolicyStore.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertPolicyStoreClient(EndpointConfiguration endpointConfiguration) : 
                base(CertPolicyStoreClient.GetBindingForEndpoint(endpointConfiguration), CertPolicyStoreClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertPolicyStoreClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CertPolicyStoreClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertPolicyStoreClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CertPolicyStoreClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertPolicyStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicy GetPolicyByName(string policyName)
        {
            return base.Channel.GetPolicyByName(policyName);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy> GetPolicyByNameAsync(string policyName)
        {
            return base.Channel.GetPolicyByNameAsync(policyName);
        }
        
        public int GetCertPoliciesCount()
        {
            return base.Channel.GetCertPoliciesCount();
        }
        
        public System.Threading.Tasks.Task<int> GetCertPoliciesCountAsync()
        {
            return base.Channel.GetCertPoliciesCountAsync();
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicy GetPolicyByID(long policyId)
        {
            return base.Channel.GetPolicyByID(policyId);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy> GetPolicyByIDAsync(long policyId)
        {
            return base.Channel.GetPolicyByIDAsync(policyId);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicy[] GetIncomingPoliciesByOwner(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use)
        {
            return base.Channel.GetIncomingPoliciesByOwner(owner, use);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy[]> GetIncomingPoliciesByOwnerAsync(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use)
        {
            return base.Channel.GetIncomingPoliciesByOwnerAsync(owner, use);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicy[] GetOutgoingPoliciesByOwner(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use)
        {
            return base.Channel.GetOutgoingPoliciesByOwner(owner, use);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy[]> GetOutgoingPoliciesByOwnerAsync(string owner, Health.Direct.Config.Client.DomainManager.CertPolicyUse use)
        {
            return base.Channel.GetOutgoingPoliciesByOwnerAsync(owner, use);
        }
        
        public bool PolicyToGroupExists(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing)
        {
            return base.Channel.PolicyToGroupExists(policyName, groupName, policyUse, incoming, outgoing);
        }
        
        public System.Threading.Tasks.Task<bool> PolicyToGroupExistsAsync(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing)
        {
            return base.Channel.PolicyToGroupExistsAsync(policyName, groupName, policyUse, incoming, outgoing);
        }
        
        public bool PolicyGroupToOwnerExists(string policyGroup, string owner)
        {
            return base.Channel.PolicyGroupToOwnerExists(policyGroup, owner);
        }
        
        public System.Threading.Tasks.Task<bool> PolicyGroupToOwnerExistsAsync(string policyGroup, string owner)
        {
            return base.Channel.PolicyGroupToOwnerExistsAsync(policyGroup, owner);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicy[] EnumerateCertPolicies(long lastCertPolicyID, int maxResults)
        {
            return base.Channel.EnumerateCertPolicies(lastCertPolicyID, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy[]> EnumerateCertPoliciesAsync(long lastCertPolicyID, int maxResults)
        {
            return base.Channel.EnumerateCertPoliciesAsync(lastCertPolicyID, maxResults);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicy AddPolicy(Health.Direct.Config.Client.DomainManager.CertPolicy policy)
        {
            return base.Channel.AddPolicy(policy);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicy> AddPolicyAsync(Health.Direct.Config.Client.DomainManager.CertPolicy policy)
        {
            return base.Channel.AddPolicyAsync(policy);
        }
        
        public void RemovePolicies(long[] policyIDs)
        {
            base.Channel.RemovePolicies(policyIDs);
        }
        
        public System.Threading.Tasks.Task RemovePoliciesAsync(long[] policyIDs)
        {
            return base.Channel.RemovePoliciesAsync(policyIDs);
        }
        
        public void RemovePolicy(string policyName)
        {
            base.Channel.RemovePolicy(policyName);
        }
        
        public System.Threading.Tasks.Task RemovePolicyAsync(string policyName)
        {
            return base.Channel.RemovePolicyAsync(policyName);
        }
        
        public void UpdatePolicyAttributes(Health.Direct.Config.Client.DomainManager.CertPolicy certPolicy)
        {
            base.Channel.UpdatePolicyAttributes(certPolicy);
        }
        
        public System.Threading.Tasks.Task UpdatePolicyAttributesAsync(Health.Direct.Config.Client.DomainManager.CertPolicy certPolicy)
        {
            return base.Channel.UpdatePolicyAttributesAsync(certPolicy);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroup[] EnumerateCertPolicyGroups(long lastCertPolicyGroupID, int maxResults)
        {
            return base.Channel.EnumerateCertPolicyGroups(lastCertPolicyGroupID, maxResults);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup[]> EnumerateCertPolicyGroupsAsync(long lastCertPolicyGroupID, int maxResults)
        {
            return base.Channel.EnumerateCertPolicyGroupsAsync(lastCertPolicyGroupID, maxResults);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroup GetPolicyGroupByName(string policyGroupName)
        {
            return base.Channel.GetPolicyGroupByName(policyGroupName);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup> GetPolicyGroupByNameAsync(string policyGroupName)
        {
            return base.Channel.GetPolicyGroupByNameAsync(policyGroupName);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroupMap[] GetPolicyGroupByNameWithPolicies(string policyGroupName)
        {
            return base.Channel.GetPolicyGroupByNameWithPolicies(policyGroupName);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroupMap[]> GetPolicyGroupByNameWithPoliciesAsync(string policyGroupName)
        {
            return base.Channel.GetPolicyGroupByNameWithPoliciesAsync(policyGroupName);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroupDomainMap[] GetPolicyGroupByNameWithOwners(string policyGroupName)
        {
            return base.Channel.GetPolicyGroupByNameWithOwners(policyGroupName);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroupDomainMap[]> GetPolicyGroupByNameWithOwnersAsync(string policyGroupName)
        {
            return base.Channel.GetPolicyGroupByNameWithOwnersAsync(policyGroupName);
        }
        
        public int GetCertPolicyGroupCount()
        {
            return base.Channel.GetCertPolicyGroupCount();
        }
        
        public System.Threading.Tasks.Task<int> GetCertPolicyGroupCountAsync()
        {
            return base.Channel.GetCertPolicyGroupCountAsync();
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroup GetPolicyGroupByID(long policyGroupID)
        {
            return base.Channel.GetPolicyGroupByID(policyGroupID);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup> GetPolicyGroupByIDAsync(long policyGroupID)
        {
            return base.Channel.GetPolicyGroupByIDAsync(policyGroupID);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroup AddPolicyGroup(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policy)
        {
            return base.Channel.AddPolicyGroup(policy);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup> AddPolicyGroupAsync(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policy)
        {
            return base.Channel.AddPolicyGroupAsync(policy);
        }
        
        public void RemovePolicyGroups(long[] policyGroupIDs)
        {
            base.Channel.RemovePolicyGroups(policyGroupIDs);
        }
        
        public System.Threading.Tasks.Task RemovePolicyGroupsAsync(long[] policyGroupIDs)
        {
            return base.Channel.RemovePolicyGroupsAsync(policyGroupIDs);
        }
        
        public void RemovePolicyGroup(string groupName)
        {
            base.Channel.RemovePolicyGroup(groupName);
        }
        
        public System.Threading.Tasks.Task RemovePolicyGroupAsync(string groupName)
        {
            return base.Channel.RemovePolicyGroupAsync(groupName);
        }
        
        public void UpdateGroupAttributes(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policyGroup)
        {
            base.Channel.UpdateGroupAttributes(policyGroup);
        }
        
        public System.Threading.Tasks.Task UpdateGroupAttributesAsync(Health.Direct.Config.Client.DomainManager.CertPolicyGroup policyGroup)
        {
            return base.Channel.UpdateGroupAttributesAsync(policyGroup);
        }
        
        public void AddPolicyToGroup(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing)
        {
            base.Channel.AddPolicyToGroup(policyName, groupName, policyUse, incoming, outgoing);
        }
        
        public System.Threading.Tasks.Task AddPolicyToGroupAsync(string policyName, string groupName, Health.Direct.Config.Client.DomainManager.CertPolicyUse policyUse, bool incoming, bool outgoing)
        {
            return base.Channel.AddPolicyToGroupAsync(policyName, groupName, policyUse, incoming, outgoing);
        }
        
        public void RemovePolicyUseFromGroup(long policyGroupMapId)
        {
            base.Channel.RemovePolicyUseFromGroup(policyGroupMapId);
        }
        
        public System.Threading.Tasks.Task RemovePolicyUseFromGroupAsync(long policyGroupMapId)
        {
            return base.Channel.RemovePolicyUseFromGroupAsync(policyGroupMapId);
        }
        
        public void AssociatePolicyGroupToDomain(string groupName, string owner)
        {
            base.Channel.AssociatePolicyGroupToDomain(groupName, owner);
        }
        
        public System.Threading.Tasks.Task AssociatePolicyGroupToDomainAsync(string groupName, string owner)
        {
            return base.Channel.AssociatePolicyGroupToDomainAsync(groupName, owner);
        }
        
        public void DisassociatePolicyGroupFromDomain(string groupName, string owner)
        {
            base.Channel.DisassociatePolicyGroupFromDomain(groupName, owner);
        }
        
        public System.Threading.Tasks.Task DisassociatePolicyGroupFromDomainAsync(string groupName, string owner)
        {
            return base.Channel.DisassociatePolicyGroupFromDomainAsync(groupName, owner);
        }
        
        public void DisassociatePolicyGroupsFromDomain(string domain)
        {
            base.Channel.DisassociatePolicyGroupsFromDomain(domain);
        }
        
        public System.Threading.Tasks.Task DisassociatePolicyGroupsFromDomainAsync(string domain)
        {
            return base.Channel.DisassociatePolicyGroupsFromDomainAsync(domain);
        }
        
        public void DisassociatePolicyGroupFromDomains(long policyGroupID)
        {
            base.Channel.DisassociatePolicyGroupFromDomains(policyGroupID);
        }
        
        public System.Threading.Tasks.Task DisassociatePolicyGroupFromDomainsAsync(long policyGroupID)
        {
            return base.Channel.DisassociatePolicyGroupFromDomainsAsync(policyGroupID);
        }
        
        public Health.Direct.Config.Client.DomainManager.CertPolicyGroup[] GetPolicyGroupsByDomain(string domain)
        {
            return base.Channel.GetPolicyGroupsByDomain(domain);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.DomainManager.CertPolicyGroup[]> GetPolicyGroupsByDomainAsync(string domain)
        {
            return base.Channel.GetPolicyGroupsByDomainAsync(domain);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICertPolicyStore))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICertPolicyStore))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6692/DomainManagerService.svc/CertPolicies");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CertPolicyStoreClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICertPolicyStore);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CertPolicyStoreClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICertPolicyStore);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ICertPolicyStore,
        }
    }
}
