//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Health.Direct.Config.Client.RecordRetrieval
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsStandard.RecordType", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Common.DnsResolver")]
    public enum DnsStandardRecordType : short
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ANAME = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MD = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MF = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CNAME = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SOA = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MB = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MG = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MR = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NULL = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WKS = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PTR = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HINFO = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINFO = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MX = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TXT = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AAAA = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SRV = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CERT = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AXFR = 252,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MAILB = 253,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MAILA = 254,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STAR = 255,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DnsRecord", Namespace="urn:directproject:config/store/082010")]
    public partial class DnsRecord : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private string DomainNameField;
        
        private long IDField;
        
        private string NotesField;
        
        private byte[] RecordDataField;
        
        private int TypeIDField;
        
        private System.DateTime UpdateDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DomainName
        {
            get
            {
                return this.DomainNameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DomainNameField, value) != true))
                {
                    this.DomainNameField = value;
                    this.RaisePropertyChanged("DomainName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes
        {
            get
            {
                return this.NotesField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NotesField, value) != true))
                {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] RecordData
        {
            get
            {
                return this.RecordDataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.RecordDataField, value) != true))
                {
                    this.RecordDataField = value;
                    this.RaisePropertyChanged("RecordData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TypeID
        {
            get
            {
                return this.TypeIDField;
            }
            set
            {
                if ((this.TypeIDField.Equals(value) != true))
                {
                    this.TypeIDField = value;
                    this.RaisePropertyChanged("TypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime UpdateDate
        {
            get
            {
                return this.UpdateDateField;
            }
            set
            {
                if ((this.UpdateDateField.Equals(value) != true))
                {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreFault", Namespace="urn:directproject:config/store/082010")]
    public partial class ConfigStoreFault : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private Health.Direct.Config.Client.RecordRetrieval.ConfigStoreError ErrorField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Health.Direct.Config.Client.RecordRetrieval.ConfigStoreError Error
        {
            get
            {
                return this.ErrorField;
            }
            set
            {
                if ((this.ErrorField.Equals(value) != true))
                {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageField, value) != true))
                {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigStoreError", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum ConfigStoreError : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unexpected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conflict = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DatabaseError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UniqueConstraint = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForeignKeyConstraint = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidIDs = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomain = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DomainNameLength = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDomainID = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAddress = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddressLength = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayNameLength = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidEmailAddress = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertificate = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidX509Certificate = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertificateData = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidOwnerName = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OwnerLength = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidThumbprint = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAnchor = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountNameLength = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMXSMTPName = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MXSMTPNameLength = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMX = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidDnsRecord = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotesLength = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAdministrator = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUsername = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPassword = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyName = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPropertyNameLength = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobName = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidTextBlobNameLength = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBlob = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AgentNameLength = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAgentName = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdnIdentifier = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMdn = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateProcessedMdn = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateDispatchedMdn = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateFailedMdn = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyProcessed = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnUncorrelated = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MdnPreviouslyFailed = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUrl = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UrlLength = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidBundle = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateMdnStart = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyName = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyNameLength = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingCertPolicyData = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicy = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroupName = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyGroup = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CertPolicyGroupDescriptionLength = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidCertPolicyUse = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MissingDomain = 59,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Certificate", Namespace="urn:directproject:config/store/082010")]
    public partial class Certificate : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private System.DateTime CreateDateField;
        
        private byte[] DataField;
        
        private long IDField;
        
        private string OwnerField;
        
        private Health.Direct.Config.Client.RecordRetrieval.EntityStatus StatusField;
        
        private string ThumbprintField;
        
        private System.DateTime ValidEndDateField;
        
        private System.DateTime ValidStartDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime CreateDate
        {
            get
            {
                return this.CreateDateField;
            }
            set
            {
                if ((this.CreateDateField.Equals(value) != true))
                {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DataField, value) != true))
                {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Owner
        {
            get
            {
                return this.OwnerField;
            }
            set
            {
                if ((object.ReferenceEquals(this.OwnerField, value) != true))
                {
                    this.OwnerField = value;
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Health.Direct.Config.Client.RecordRetrieval.EntityStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                if ((this.StatusField.Equals(value) != true))
                {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Thumbprint
        {
            get
            {
                return this.ThumbprintField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ThumbprintField, value) != true))
                {
                    this.ThumbprintField = value;
                    this.RaisePropertyChanged("Thumbprint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ValidEndDate
        {
            get
            {
                return this.ValidEndDateField;
            }
            set
            {
                if ((this.ValidEndDateField.Equals(value) != true))
                {
                    this.ValidEndDateField = value;
                    this.RaisePropertyChanged("ValidEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime ValidStartDate
        {
            get
            {
                return this.ValidStartDateField;
            }
            set
            {
                if ((this.ValidStartDateField.Equals(value) != true))
                {
                    this.ValidStartDateField = value;
                    this.RaisePropertyChanged("ValidStartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityStatus", Namespace="http://schemas.datacontract.org/2004/07/Health.Direct.Config.Store")]
    public enum EntityStatus : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:directproject:config/store/082010", ConfigurationName="Health.Direct.Config.Client.RecordRetrieval.IRecordRetrievalService")]
    public interface IRecordRetrievalService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IRecordRetrievalService/GetMatchingDnsRecor" +
            "ds", ReplyAction="urn:directproject:config/store/082010/IRecordRetrievalService/GetMatchingDnsRecor" +
            "dsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.RecordRetrieval.ConfigStoreFault), Action="urn:directproject:config/store/082010/IRecordRetrievalService/GetMatchingDnsRecor" +
            "dsConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.RecordRetrieval.DnsRecord[] GetMatchingDnsRecords(string domainName, Health.Direct.Config.Client.RecordRetrieval.DnsStandardRecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IRecordRetrievalService/GetMatchingDnsRecor" +
            "ds", ReplyAction="urn:directproject:config/store/082010/IRecordRetrievalService/GetMatchingDnsRecor" +
            "dsResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.RecordRetrieval.DnsRecord[]> GetMatchingDnsRecordsAsync(string domainName, Health.Direct.Config.Client.RecordRetrieval.DnsStandardRecordType typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IRecordRetrievalService/GetCertificatesForO" +
            "wner", ReplyAction="urn:directproject:config/store/082010/IRecordRetrievalService/GetCertificatesForO" +
            "wnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Health.Direct.Config.Client.RecordRetrieval.ConfigStoreFault), Action="urn:directproject:config/store/082010/IRecordRetrievalService/GetCertificatesForO" +
            "wnerConfigStoreFaultFault", Name="ConfigStoreFault")]
        Health.Direct.Config.Client.RecordRetrieval.Certificate[] GetCertificatesForOwner(string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:directproject:config/store/082010/IRecordRetrievalService/GetCertificatesForO" +
            "wner", ReplyAction="urn:directproject:config/store/082010/IRecordRetrievalService/GetCertificatesForO" +
            "wnerResponse")]
        System.Threading.Tasks.Task<Health.Direct.Config.Client.RecordRetrieval.Certificate[]> GetCertificatesForOwnerAsync(string domain);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IRecordRetrievalServiceChannel : Health.Direct.Config.Client.RecordRetrieval.IRecordRetrievalService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class RecordRetrievalServiceClient : System.ServiceModel.ClientBase<Health.Direct.Config.Client.RecordRetrieval.IRecordRetrievalService>, Health.Direct.Config.Client.RecordRetrieval.IRecordRetrievalService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RecordRetrievalServiceClient() : 
                base(RecordRetrievalServiceClient.GetDefaultBinding(), RecordRetrievalServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRecordRetrievalService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordRetrievalServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(RecordRetrievalServiceClient.GetBindingForEndpoint(endpointConfiguration), RecordRetrievalServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordRetrievalServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RecordRetrievalServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordRetrievalServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RecordRetrievalServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordRetrievalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Health.Direct.Config.Client.RecordRetrieval.DnsRecord[] GetMatchingDnsRecords(string domainName, Health.Direct.Config.Client.RecordRetrieval.DnsStandardRecordType typeID)
        {
            return base.Channel.GetMatchingDnsRecords(domainName, typeID);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.RecordRetrieval.DnsRecord[]> GetMatchingDnsRecordsAsync(string domainName, Health.Direct.Config.Client.RecordRetrieval.DnsStandardRecordType typeID)
        {
            return base.Channel.GetMatchingDnsRecordsAsync(domainName, typeID);
        }
        
        public Health.Direct.Config.Client.RecordRetrieval.Certificate[] GetCertificatesForOwner(string domain)
        {
            return base.Channel.GetCertificatesForOwner(domain);
        }
        
        public System.Threading.Tasks.Task<Health.Direct.Config.Client.RecordRetrieval.Certificate[]> GetCertificatesForOwnerAsync(string domain)
        {
            return base.Channel.GetCertificatesForOwnerAsync(domain);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRecordRetrievalService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRecordRetrievalService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:6693/RecordRetrievalService.svc/Records");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RecordRetrievalServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRecordRetrievalService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RecordRetrievalServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRecordRetrievalService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRecordRetrievalService,
        }
    }
}
